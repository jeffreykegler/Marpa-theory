% Copyright 2014 Jeffrey Kegler
% This document is licensed under
% a Creative Commons Attribution-NoDerivs 3.0 United States License.
\documentclass[12pt]{amsart}
\usepackage{amssymb}
\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage{url}

% This is now a "paper", but may be a chapter
% or something else someday
% This command might make any such change easier.
\newcommand{\doc}{paper}

% TODO -- these comments mark stuff to be worked on
\newcommand{\todo}[1]{\par{\large\bf Todo: #1}\par}
\newcommand{\mymathop}[1]{\mathop{\texttt{#1}}}

% For a type name, when it occurs in text
\newcommand{\type}[1]{\ensuremath{#1}}

\newcommand{\defined}{\underset{\text{def}}{\equiv}}
\newcommand{\dfn}[1]{{\bf #1}}
\newcommand{\sep}{\,\mid\,}
\newcommand{\mydot}{\raisebox{.05em}{$\,\bullet\,$}}
\newcommand{\cat}{\,.\,}
\newcommand{\size}[1]{\ensuremath{\left | {#1} \right |}}
\newcommand{\bigsize}[1]{\ensuremath{\bigl| {#1} \bigr|}}
\newcommand{\order}[1]{\ensuremath{{\mathcal O}(#1)}}
\newcommand{\Oc}{\order{1}}
\newcommand{\On}{\order{\var{n}}}
\newcommand{\inference}[2]{\genfrac{}{}{1pt}{}{#1}{#2}}
\newcommand{\ruleMarker}[1]{\xrightarrow{#1}}
\newcommand{\Tsize}[1]{\size{#1}_T}

% I use hyphens in variable names,
% so I need to ensure that subtraction is
% clearly distinguished by the typography
\newcommand{\subtract}{\,-\,}

\newcommand{\var}[1]{\ensuremath{\texttt{#1}}}

\newcommand{\cfg}{CFG}

\newcommand{\de}{\rightarrow}
\newcommand{\derives}{\Rightarrow}
\newcommand{\destar}
    {\mathrel{\mbox{$\:\stackrel{\!{\ast}}{\Rightarrow\!}\:$}}}
\newcommand{\deplus}
    {\mathrel{\mbox{$\:\stackrel{\!{+}}{\Rightarrow\!}\:$}}}
\newcommand{\deR}
    {\mathrel{\mbox{$\:\stackrel{\!{R}}{\Rightarrow\!}\:$}}}
\newcommand{\deRstar}
    {\mathrel{\mbox{$\:\stackrel{\!{R\ast}}{\Rightarrow\!}\:$}}}
\newcommand{\deRplus}
    {\mathrel{\mbox{$\:\stackrel{\!{R+}}{\Rightarrow\!}\:$}}}
\newcommand{\derivg}[1]{\mathrel{\mbox{$\:\Rightarrow\:$}}}
\newcommand{\derivrg}[2]{\mathrel{\mbox{$\:\stackrel{\!{#1}}%
        {\Rightarrow\!}\:$}}}

\newcommand{\set}[1]{{\left\lbrace #1 \right\rbrace} }
\newcommand{\bigset}[1]{{\bigl\lbrace #1 \bigr\rbrace} }
\newcommand{\Bigset}[1]{{\Bigl\lbrace #1 \Bigr\rbrace} }

\newcommand{\typed}[2]{\var{#1}_{\normalfont\textsc{#2}}}
\newcommand{\setTyped}[2]{\var{#1}_{\set{\normalfont\textsc{#2}}}}

\newcommand{\dr}[1]{\typed{#1}{dr}}
\newcommand{\Vdr}[1]{\ensuremath{\dr{#1}}}
\newcommand{\eim}[1]{\typed{#1}{eim}}
\newcommand{\Veim}[1]{\ensuremath{\eim{#1}}}
\newcommand{\es}[1]{\typed{#1}{es}}
\newcommand{\Ves}[1]{\ensuremath{\es{#1}}}
\newcommand{\mylim}[1]{\typed{#1}{lim}}
\newcommand{\Vlim}[1]{\ensuremath{\mylim{#1}}}
\newcommand{\loc}[1]{\typed{#1}{loc}}
\newcommand{\Vloc}[1]{\ensuremath{\loc{#1}}}
\newcommand{\myrule}[1]{\typed{#1}{rule}}
\newcommand{\Vrule}[1]{\ensuremath{\myrule{#1}}}
\newcommand{\mysf}[1]{\typed{#1}{sf}}
\newcommand{\Vsf}[1]{\ensuremath{\mysf{#1}}}
\newcommand{\str}[1]{\typed{#1}{str}}
\newcommand{\Vstr}[1]{\ensuremath{\str{#1}}}
\newcommand{\sym}[1]{\typed{#1}{sym}}
\newcommand{\Vsym}[1]{\ensuremath{\sym{#1}}}
\newcommand{\ts}[1]{\typed{#1}{ts}}
\newcommand{\Vts}[1]{\ensuremath{\ts{#1}}}
\newcommand{\orig}[1]{\typed{#1}{orig}}
\newcommand{\Vorig}[1]{\ensuremath{\orig{#1}}}
\newcommand{\token}[1]{\typed{#1}{token}}
\newcommand{\Vtoken}[1]{\ensuremath{\token{#1}}}
\newcommand{\tp}[1]{\typed{#1}{tp}}
\newcommand{\Vtp}[1]{\ensuremath{\tp{#1}}}
\newcommand{\ws}[1]{\typed{#1}{ws}}
\newcommand{\Vws}[1]{\ensuremath{\ws{#1}}}


\newcommand{\eimset}[1]{\setTyped{#1}{eim}}
\newcommand{\Veimset}[1]{\ensuremath{\eimset{#1}}}
\newcommand{\ruleset}[1]{\setTyped{#1}{rule}}
\newcommand{\Vruleset}[1]{\ensuremath{\ruleset{#1}}}
\newcommand{\symset}[1]{\setTyped{#1}{sym}}
\newcommand{\Vsymset}[1]{\ensuremath{\symset{#1}}}

\newcommand{\Vsize}[1]{\ensuremath{\size{\var{#1}}}}

\newcommand{\alg}[1]{\ensuremath{\textsc{#1}}}
\newcommand{\Earley}{\ensuremath{\alg{Earley}}}
\newcommand{\Leo}{\ensuremath{\alg{Leo}}}
\newcommand{\Marpa}{\ensuremath{\alg{Marpa}}}

\newcommand{\Cdr}{\var{dr}}
\newcommand{\Cg}{\var{g}}
\newcommand{\Crules}{\var{rules}}
\newcommand{\Cw}{\var{w}}
\newcommand{\Cwrange}[2]{\CVrange{\Cw}{#1}{#2}}
\newcommand{\CVw}[1]{\ensuremath{\sym{\Cw[\var{#1}]}}}
\newcommand{\CVwstr}[1]{\ensuremath{\str{\Cw[\var{#1}]}}}
\newcommand{\CVrange}[3]{\ensuremath{{#1[#2 \dots #3]}}}

\newcommand{\GOTO}{\mymathop{GOTO}}
\newcommand{\Next}[1]{\mymathop{Next}(#1)}
\newcommand{\Predict}[1]{\mymathop{Predict}(#1)}
\newcommand{\Postdot}[1]{\mymathop{Postdot}(#1)}
\newcommand{\Penult}[1]{\mymathop{Penult}(#1)}
\newcommand{\LHS}[1]{\mymathop{LHS}(#1)}
\newcommand{\RHS}[1]{\mymathop{RHS}(#1)}
\newcommand{\ID}[1]{\mymathop{ID}(#1)}
\newcommand{\PSL}[2]{\mymathop{PSL}[#1][#2]}
\newcommand{\myL}[1]{\mymathop{Lang}(#1)}
\newcommand\Etable[1]{\ensuremath{\mymathop{table}[#1]}}
\newcommand\bigEtable[1]{\ensuremath{\mymathop{table}\bigl[#1\bigr]}}
\newcommand\Rtable[1]{\ensuremath{\mymathop{table}[#1]}}
\newcommand\Rtablesize[1]{\ensuremath{\bigl| \mymathop{table}[#1] \bigr|}}
\newcommand\Vtable[1]{\Etable{\var{#1}}}
\newcommand\EEtable[2]{\ensuremath{\mymathop{table}[#1,#2]}}
\newcommand\EVtable[2]{\EEtable{#1}{\var{#2}}}

% I want to use 'call' outside of pseudocode
\newcommand\call[2]{\textproc{#1}\ifthenelse{\equal{#2}{}}{}{(#2)}}%

% I don't like to put whole paragraphs in italics,
% so I make this simple variation on the "plain" theoremstyle
\newtheoremstyle{myplain}
  {\topsep}   % ABOVESPACE
  {\topsep}   % BELOWSPACE
  {\normalfont}  % BODYFONT
  {0pt}       % INDENT (empty value is the same as 0pt)
  {\bfseries} % HEADFONT
  {.}         % HEADPUNCT
  {5pt plus 1pt minus 1pt} % HEADSPACE
  {}          % CUSTOM-HEAD-SPEC

\theoremstyle{myplain}
\newtheorem{theorem}{Theorem}[section]
\newtheorem{construction}[theorem]{Construction}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{observation}[theorem]{Observation}
\newtheorem{step}[theorem]{Step}

% \theoremstyle{remark}
% \newtheorem*{remark}{Remark}

\hyphenation{oper-and oper-ands}
\hyphenation{look-ahead}
\hyphenation{memo-ization}

\begin{document}

\date{\today}

\title{Marpa, a practical general parser: the recognizer}

\author{Jeffrey Kegler}
\thanks{%
Copyright \copyright\ 2014 Jeffrey Kegler.
}
\thanks{%
This document is licensed under
a Creative Commons Attribution-NoDerivs 3.0 United States License.
}

\begin{abstract}
The recognizer of the
Marpa parser is described.\linebreak
Marpa is a practical and fully implemented
system for the recognition, parsing
and evaluation of context-free grammars.
The Marpa recognizer is based on Jay Earley's algorithm,
as modified by Joop Leo.
Leo's algorithm, and therefore Marpa,
is shown to have \On{} time complexity
for any finite union of LR left-congruent grammars (LRLG).
(The LRLG grammars properly include the LR-regular grammars.
Individual LRLG grammars are unambiguous, but their finite union
includes many ambiguous grammars.)
The Marpa parsing strategy is primarily syntax-driven
but, unlike previous Earley-based parse engines,
the Marpa parse engine
will allow the parse to be interrupted
for application-specific logic.
Events can be scheduled
to trigger when symbols
are recognized or predicted,
pausing the parse at those points.
Using nulled symbols, the application can in effect
schedule events that trigger at any point in a rule.
While a parse is paused,
an application has available to it full information
on the state of the parse.
Marpa can also
pause the parse on rejection of a token as unacceptable.
This can be very useful,
since rejection is based on
exact knowledge of those tokens which allow the parse to continue,
and Marpa allows parsing to be retried with another token.
\end{abstract}

\maketitle

\section{Introduction}

The first parsers to be described were left parsers\cite{Irons}.
They were flexible, but efficient only for a confining
subset of the context free grammars.
During the 1960's the effort to replace left parsing
pitted Knuth's LR-parsing against
Earley's parsing algorithm.
The discovery of LALR parsing, which adopted LR-parsing to the severe hardware constraints
of the 1970's, made LR parsing the victor.
For the next three decades,
LALR parsing was respected
by practitioners as the state-of-the-art,
and the theory of LR parsing dominated
the textbooks.

But over the past decade,
practitioners concluded that the modest gains
in power that LALR offers
over left parsing were not adequate
compensation for LALR's problems with
error detection, recovery and reporting
and its life-cycle maintenance costs.
LALR is being abandoned
in favor of the left parsing of the 1960's.
At this writing,
this reversion to the technology of over half
a century ago is the major trend in parsing.

It took five decades for
the practice of parsing to make
the round trip
from left parsing to LR, then back again.
These were not decades during which
the underlying
computer technology remained unchanged.
For most of today's computer programmers,
the hardware constraints that led to the verdict
against Earley's are not even a memory.

In the meantime,
the theory of Earley parsing has not stood still.
A major improvement to Earley's was discovered by
Joop Leo in 1991,
Leo's algorithm, without resorting to lookahead,
runs in \On{} time for a vast class of grammars,
including the LR-regular grammars and their finite unions.
Despite this,
neither Earley's original algorithm,
or Leo's improvement to it,
have previously been incorporated into a highly available tool,
while several such tools exist for LALR\cite{Johnson} and
tools for regular expressions are numerous and widespread.

The Marpa project was intended to remedy this situation.
The first stable version\cite{Marpa-XS} was uploaded to the CPAN Perl archive
on Solstice Day in 2011.
This \doc{} describes Marpa::R2\cite{Marpa-R2},
the current stable version.

The next section of this paper,
Section \ref{s:capabilities},
summarizes the advantages
of Marpa, prior to immersion into the details of
implementation and its supporting proofs.
Section
\ref{s:notation} describes
the basic notation and conventions
of this \doc.
Section \ref{s:rewrite} deals with the rewrites Marpa
uses to put its grammars into Marpa internal form.
This puts us in a position to describe,
in Section \ref{s:tree-notation},
our tree notation.
Sections \ref{s:earley},
\ref{s:earley-approach},
and \ref{s:earley-ops}
describe Earley's algorithm.
Sections
\ref{s:leo-memoization}
and \ref{s:leo} describe Leo's modification
to Earley's algorithm.
Section \ref{s:pseudocode} presents the pseudocode
for Marpa's recognizer.
Section
\ref{s:correct}
contain a proof of Marpa's correctness,
while Section \ref{s:complexity} contains
its complexity results.
Finally,
Section \ref{s:input}
generalizes Marpa's input model.

\section{A summary of Marpa's capabilities}
\label{s:capabilities}

\subsection{Time and space complexity}

As implemented,
Marpa parses,
without exception,
all context-free grammars.
Time bounds are the best of Leo\cite{Leo1991}
and Earley\cite{Earley1970}.
The bound which Leo claimed,
\On{} for LR-regular grammars,
is especially relevant to
Marpa's goal of being a practical parser:
If a grammar is in a class of grammar currently in practical use,
Marpa parses it in linear time.

Later in
this \doc{} we will show some results that
improve on Leo's claims for his algorithm,
results which also apply to Marpa.
If a grammar is $LR(\pi)$, where $\pi$ is a partition
which is both finite and a left congruence,
then Marpa runs in \On{} time.
We call this class of grammars LRLG.
Since a regular partition is a left congruence,
every LR-regular grammar is an LRLG grammar.

We will also show that Marpa runs in \On{} space
and time for any grammar that is
the union of a finite number of LRLG grammars.
While all LRLG grammars are unambiguous,
the class of their finite unions includes
ambiguous grammars.
Ambiguous grammars of practical interest
are especially likely to be a finite union of LRLG grammars.

\subsection{Error detection and recovery}

Marpa breaks new ground with respect to error-detection.
Marpa has the immediate error detection property,
but goes well beyond that:
it is fully aware of the state of the parse,
and can report this to the user while tokens are
being scanned.

Marpa allows the lexer to check its list
of acceptable tokens before a token is scanned.
Because rejection of tokens is easily and
efficiently recoverable,
the lexer is also free to take an event-driven
approach.
Rejection and recovery are quite efficient,
and no longer
need to be seen as acts of desperation,
to be used for error detection only.
Token rejection can be used as
the basis for parsing techniques.

\subsection{Pausing and resuming parsing}

Recursive descent
is the dominant practical parsing technique
as of this writing.
Recursive descent
forces the programmer to specify the parsing
logic step by step,
but this is a necessity that practitioners have come to see
as an advantage.
The programmer of a recursive descent
parser can easily insert
application-specific logic at
any point in the parse,
although maintaining
all the application-specific coding that
recursive descent requires
over the life-cycle of the
parser may prove anything but easy.

Marpa allows the programmer the best of both worlds.
Marpa's approach to parsing is primarily syntax-driven.
But the syntax-driven parsing can be interrupted at any point
in favor of application-specific logic.
In the Marpa context, application-specific logic has
advantages that it does not have in a recursive descent
framework.

Code called in a Marpa framework can query Marpa about the
state of the parse.
From Marpa, an application can find out
which rules have been predicted, completed or partially recognized,
and at which locations in the input.
Marpa can also determine which tokens are currently acceptable.
Marpa's idea of ``acceptability'' is very precise.
Marpa will report a token as acceptable if and only if
for some possible continuation of the input,
the parse could succeed.
The application is free to use this information to
guide the creation and reading of tokens.

To help the application to decide efficiently when
to switch from syntax-driven parsing
to application-specific logic,
Marpa offers an ``event'' mechanism.
Events can be scheduled to trigger
when a non-nulled symbol is predicted;
when a non-nulled symbol is recognized;
or when a nulled symbol occurs.
Nulled symbols,
whose occurrence is simultaneously a prediction and a recognition,
are especially useful for events.
A nulling symbol can be placed anywhere, which means
that events can be set up to trigger
at any position inside a Marpa rule.

\subsection{Ruby Slipper parsing}

If a token is rejected,
the lexer is free to create a new token
in the light of the parser's expectations.
This approach can be described
as making the parser's
``wishes'' come true,
and we have called this
``Ruby Slippers Parsing''.

One use of the Ruby Slippers technique is to
parse with a clean
but oversimplified grammar,
programming the lexical analyzer to make up for the grammar's
short-comings on the fly.
The author has implemented an HTML parser\cite{Marpa-HTML},
based on a grammar that assumes that all start
and end tags are present.
Such an HTML grammar is too simple even to describe perfectly
standard-conformant HTML,
but the lexical analyzer is
programmed to supply start and end tags as requested by the parser.
The result is a very simply and cleanly designed parser
that parses very liberal HTML
and accepts all input files,
in the worst case
treating them as highly defective HTML.

\section{Notation}
\label{s:notation}

We assume familiarity with the theory of parsing,
as well as Earley's algorithm.
This \doc{} will
use subscripts to indicate commonly occurring types.
\begin{center}
\begin{tabular}{ll}
$\var{X}_T$ & The variable \var{X} of type $T$ \\
$\setTyped{set-one}{t}$ & The variable \var{set-one} of type set of $T$ \\
$SYM$ & The type for a symbol \\
\Vsym{a} & The variable \var{a} of type $SYM$ \\
\Vsymset{set-two} & The variable \var{set-two}, a set of symbols \\
\end{tabular}
\end{center}
Type is often clear from the context,
and subscripts to indicate type are often omitted.
The notation for
constants is the same as that for variables.
Multi-character variable names will be common,
and operations will never be implicit.
\begin{center}
\begin{tabular}{ll}
Multiplication &  $\var{a} \times \var{b}$ \\
Concatenation & $\var{a} \cat \var{b}$ \\
Subtraction & $\var{symbol-count} \subtract \var{terminal-count}$ \\
\end{tabular}
\end{center}
Type names are often used in the text
as a convenient way to refer to
their type.

In this paper, unless indicated otherwise,
\Vsymset{T} will be a non-empty finite set of terminal symbols,
called the alphabet.
\Vsymset{L} be another non-empty set of symbols, called LHS symbols.
\var{L} and \var{T} will not necessarily be disjoint.
\Vsymset{V}, where $\var{V} = \var{T} \cup \var{L}$,
will be the vocabulary.

Where \Vsymset{sym-set} is a non-empty set of symbols,
$\var{sym-set}^\ast$ is the set of all sequences
formed from those symbols.
Call the empty string, $\epsilon$.
Then $\Vsymset{sym-set}^+ = \var{sym-set}^\ast \backslash \epsilon$.
If $\var{string} \in \var{T}^\ast$, \Vstr{string}
is of type \type{STR}.
If $\var{form} \in \var{V}^\ast$, \Vsf{form}
is of type \type{SF}.
Where \Vstr{s} is a string,
\size{\Vstr{s}} is its length, counted in symbols.

Let \Vruleset{rules} be a set of rules (type \type{RULE}),
where a rule is a duple
of the form $[\Vsym{lhs} \de \Vsf{rhs}]$,
such that
\begin{equation*}
\Vsym{lhs} \in \var{L} \quad \text{and}
\quad \Vsf{rhs} \in \var{V}^+.
\end{equation*}
\Vsym{lhs} is referred to as the left hand side (LHS)
of \Vrule{r}.
\Vstr{rhs} is referred to as the right hand side (RHS)
of \Vrule{r}.
The LHS and RHS of \Vrule{r} may also be
referred to as 
$\LHS{\var{r}}$ and $\RHS{\var{r}}$, respectively.

We will represent grammars as 4-tuples
of
\begin{equation*}
[\Vsymset{vocab}, \Vsymset{lhs-syms}, \var{productions}, \Vsym{start}].
\end{equation*}
Here \Vsym{start}, $\var{start} \in \var{lhs-syms}$,
is a distinguished start symbol.
The grammar's set of terminals will be
be $\Vsymset{vocab} \backslash \Vsymset{lhs-syms}$,
unless indicated otherwise.
In most contexts of this \doc{},
only one grammar will be under discussion:
\begin{equation*}
    \Cg = [\Vsymset{V}, \Vsymset{L}, \var{rules}, \Vsym{S}].
\end{equation*}

The rules imply the traditional rewriting system,
in which $\Vstr{x} \derives \Vstr{y}$
states that \Vstr{x} derives \Vstr{y} in exactly one step;
$\Vstr{x} \deplus \Vstr{y}$
states that \Vstr{x} derives \Vstr{y} in one or more steps;
and $\Vstr{x} \destar \Vstr{y}$
states that \Vstr{x} derives \Vstr{y} in zero or more steps.

We say that symbol \Vsym{x} is \dfn{nullable} if and only if
$\Vsym{x} \destar \epsilon$.
\Vsym{x} is \dfn{nonnull} if and only if it is not nullable.

Let the input to
the parse be \Cw{} such that $\Cw \in \var{T}^+$.
Locations in the input will be of type \type{LOC}.
Let \Vsize{w} be the length of the input, counted in symbols.
When we state our complexity results later,
they will often be in terms of $\var{n}$,
where $\var{n} = \Vsize{w}$.
Let \CVw{i} be character \var{i}
of the input,
$0 \le \Vloc{i} < \Vsize{w}$.
Let $\Cwrange{\var{i}}{\var{j}}$ be string of characters from
\Vloc{i} to \Vloc{j}, inclusive,
where
$0 \le \Vloc{i}, \Vloc{j} < \Vsize{w}$.
As a special case, 
$\Cwrange{\var{i}}{\var{j}}$,
where $\Vloc{j} \le \Vloc{i}$,
is the input of
zero length, starting at \Vloc{i}.

The alert reader may have noticed that the previous definition
of \Cw{} did not allow zero-length inputs.
To simplify the mathematics, we exclude null parses
and trivial grammars from consideration.
In its implementations,
the Marpa parser
deals with null parses and trivial grammars as special cases.
(Trivial grammars are those that recognize only the null string.)

% TODO -- Move these to where used?  Or eliminate them?
In this \doc{},
\Earley{} will refer to the Earley's original
recognizer\cite{Earley1970}.
\Leo{} will refer to Leo's revision of \Earley{}
as described in~\cite{Leo1991}.
\Marpa{} will refer to the parser described in
this \doc{}.
Where $\alg{Recce}$ is a recognizer,
The language of \Cg{} is $\myL{\Cg}$,
$\myL{\alg{Recce},\Cg}$ will be the language accepted by $\alg{Recce}$
when parsing \Cg{}.

\section{Rewriting the grammar}
\label{s:rewrite}

Marpa runs on fully general BNF.
To do this, it rewrites the grammar before calling
the recognizer,
then undoes the rewrite after the recognizer has run.
The original grammar is called the {\bf external grammar},
because in the Marpa implementation, that is the one which
the user sees.
The grammar at the completion of the rewrite is called
the {\bf internal grammar}.

The Marpa parse engine actually runs on the internal grammar.
It is important that the two rewrites,
from external to internal,
and from internal to external,
be such that they can be done efficiently,
while preserving the semantics.
Marpa claims to be a practical parser,
and semantics are essential in practical parsing.

In fact, as implemented, Marpa often translates
symbols, rules and positions in rules back and forth
between internal and external
while the recognizer is still running.
This is done, for example, in implementing events.
Applications can specify events to trigger when certain symbols
are either predicted or recognized, and the application
needs to be able to specify these events
in terms of the symbols of the external grammar.
Marpa is implemented so that it can translate from external symbol to
internal and back again very quickly.

We now describe the rewrite.
This description is conceptual --
the actual implementation is optimized.
The rewrite takes place as if the following steps were executed:

\begin{step}
Determine if the grammar is trivial.
A grammar \Cg{} is trivial if and only if
$\myL{\Cg} = \set{ \epsilon }$.
Trivial grammars are easily dealt with, without using the methods
described in this paper.
Trivial grammars are special cased,
and the remaining steps of this rewrite are ignored.
\end{step}

\begin{step}
Reduce the grammar, eliminating inaccessible and unproductive symbols.
Inaccessible symbols are those which cannot be reached from the start symbol.
Unproductive symbols are those which can never derive a sentence in the language.
\end{step}

\begin{step}
Augment the grammar.
Rename symbols so that the current start symbol is named \Vsym{old-start}.
Add a new dedicated start symbol, \Vsym{S}.
Add a new dedicated start rule $[\var{S} \de \Vsym{old-start}]$.
\end{step}

\begin{step}
\label{step:divide-rules}
\label{step:first-CHAF}
Rewrite the grammar so that no RHS contains more than two properly
nullable symbols.
A properly nullable symbol is a nullable symbol which is not a
nulling symbol.
This rewrite can be done by splitting the offending rules into
several rules.
\end{step}

\begin{step}
For each properly nullable symbol, create two aliases,
one a nulling symbol and one a non-nullable symbol.
\end{step}

\begin{step}
\label{step:factor-rules}
Using the aliases created in the previous step,
eliminate all properly nullable symbols.
This is done by
``factoring'' every rule with one or more proper nullable
into several rules,
so that the new set of rules represents every possible combination
of nulling and non-nullable symbols.
Since there are two aliases and at most two properly nullable symbols
in a rule, the maximum number of ``factors'' is $2^2 = 4$.
\end{step}

\begin{step}
\label{step:last-CHAF}
Every rule and symbol
will now be nulling or non-nullable.
Determine which symbols are nulling,
and which rules are nulling.
Discard all the nulling rules, treating their LHS symbol
as a nulling symbol.
\end{step}

\begin{step}
Remove all nulling symbols from the rules, marking their
location for future reference.
\end{step}

This rewrite of Steps
\ref{step:first-CHAF} through \ref{step:last-CHAF}
is based on that of Aycock and Horspool\cite{AH2002},
and we call it Chomsky-Horspool-Aycock Form (CHAF).
The major difference between this rewrite and \cite{AH2002}
is Step \ref{step:divide-rules}.
Without Step \ref{step:divide-rules},
rules with many optional symbols on their RHS could come into
Step \ref{step:factor-rules}.
Where \var{x} is the number of proper nullables, the number of
factors would be $2^\var{x}$, so that
factoring would be exponential in the length of the rule.
Although \var{x} is a constant that depends on the grammar,
we see the exponential explosion
as a potential problem in practice.
SQL's select statement is one example of a rule
whose rewrite would be exponential
without
Step \ref{step:divide-rules}.

From this point in this \doc{} on,
unless otherwise noted,
the grammar \Cg{} will refer to a Marpa internal grammar.
Summarizing the result of this rewrite:
\begin{itemize}
\item \Cg{} will contain no inaccessible symbols.
\item \Cg{} will contain no unproductive symbols.
\item \Cg{} will contain no nullable symbols.
\item \Cg{} will contain no nullable rules.
\item \Cg{} will have a dedicated start symbol, \Vsym{S}, which
occurs only as the LHS of the start rule.
\item \Cg{} will have a dedicated start rule, of the form
\begin{equation*}
[\Vsym{S} \de \Vsym{old-start}].
\end{equation*}
\end{itemize}
Note that if a grammar in Marpa external form
contain cycles, it will still contain cycles
in Marpa internal form.
Nothing in the rewrite eliminates cycles.

\section{Tree notation}
\label{s:tree-notation}

In this paper, we make use of tree strings,
a notation from \cite{Wich2005},
for describing trees.
Wich's tree strings are formed from an alphabet
which includes the symbols of the grammar
plus rule markers.
We will show rule markers in the form
\begin{equation*}
\ruleMarker{[\Vsym{lhs} \de Vsf{rhs}]}.
\end{equation*}
It is important to note the rule
markers must be treated as atomic.

Wich describes tree strings in terms of leftmost derivations.
Rightmost derivations are needed for our purposes,
we in this \doc{} will describe them using a construction
from a rightmost derivation.
\begin{construction}

Let $\var{a}[\var{i}]$ be the \var{i}'th step of a right
derivation.
For each step of this derivation, we construct a tree string.
If $\var{a0} = \Vsym{S}$,
the initial tree string is
\begin{equation}
\label{e:initial-tree-string}
  S
\end{equation}
We call the tree tree constructed at a derivation step,
the corresponding tree string.
The tree string corresponding to \var{a0} is
\eqref{e:initial-tree-string}.

Within corresponding tree strings and derivation steps,
we also identify pairs of symbols, one from the derivation 
step and the other from the tree string, as ``corresponding''.
In the tree string, every symbol which is not a rule marker
will have a corresponding symbol in the derivation step.
Every symbol in the derivation step will have a corresponding
symbol in the tree string.
Initially, Vsym{S} in derivation step \var{a0} corresponds to
the \var{S} in the tree string.
Corresponding symbols will have the same name, but name is not
enough to establish correspondence -- position also matter.

For steps after the initial step,
we determine the rule that was applied
in the right derivation.
Let
\begin{equation}
  \Vts{before} \cat \Vsym{lhs} \cat \Vts{after}
\end{equation}
be the current tree string,
and
\begin{equation}
  \Vsf{before} \cat \Vsym{lhs} \cat \Vsf{after} \deR
  \Vsf{before} \cat \Vsym{rhs} \cat \Vsf{after}
\end{equation}
be the current derivation step and its successor,
Also let \Vsym{lhs} in the derivation step
correspond to \Vsym{lhs} in the current tree string.
We can see that $\Vsym{lhs} \de \Vsf{rhs}$ was the rule that
was applied in the right derivation.
The new tree string will be
\begin{equation}
  \Vts{before} \cat \ruleMarker{[\var{lhs} \de var{rhs}]} \cat \Vts{rhs} \cat \Vts{after}.
\end{equation}
and the symbols in \Vts{rhs} and \Vsf{rhs} will correspond.

Let two subsequent steps of our right derivation be
$\var{step-n}$ and $\var{step-n}'$ such that
\begin{gather}
    \var{step-n} = \var{A} \cat \var{D} \cat \var{x} \deR \var{A} \cat \var{B} \cat \var{C} \cat \var{D}
\end{gather}
Clearly the rule which

For each step of the rightmost derivation, we will
construct a new tree string from that
left,
Where $[\Vsym{S} \de \Vsf[start-rhs]]$ is the start rule
We begin the construction
For the purposes of illustration,
we relax our restriction of grammars to the Marpa internal
to assume a start rule of the more general form:
\begin{equation*}
\Vsym{S} \de \Vsym{rhs1} \cat \Vsym{rhs2} \dots \Vsym{rhs-n},
\end{equation*}
which has \var{n} RHS symbols.
The first two steps of the rightmost derivation
take the form:
\begin{gather*}
\Vsym{S} \deR \Vsym{rhs1} \cat \Vsym{rhs2} \dots \Vsym{rhs-n} \\
\text{where} \quad \Vsym{S}) \text{ is step 0} \\
\text{and} \quad \Vsym{rhs1} \cat \Vsym{rhs2} \dots \Vsym{rhs-n} \text{ is step 1}.
\end{gather*}
From this, we construct the initial tree string:
\begin{gather*}
\ruleMarker{[\Vsym{S} \de Vsf{step-1}]} \cat \Vsym{rhs1} \cat \Vsym{rhs2} \dots \Vsym{rhs-n}.
\end{gather*}
This tree string consists of a rule marker, followed by \var{n} other symbols,
so that its length, all told, is $\var{n}+1$.

In this construction of tree string,
we will specify symbols in the most recent derivation step
which correspond one-to-one with symbols in the tree string.
In the initial tree string, each symbol $\Vsym{rhs1}, \Vsym{rhs2}, \dots \Vsym{rhs-n}$
corresponds one-to-one with the symbol of the same name in derivation step 1.
(Note that it will not be the case in general that symbols of the same name correspond --
correspondence depends on position.)

For the next step, we pick the rightmost non-terminal in the derivation string,
call it \Vsym{x},
and replace it with its expansion
\begin{gather*}
\ruleMarker{[\var{x} \de \var{y1}\cat\var{y2} \dots \var{y-n}]} \cat \var{y1} \cat \var{y2} \dots \var{y-n}, \\
\text{where} \quad \Vsym{x} \de  \Vsym{y1}\cat\Vsym{y2} \dots \Vsym{y-n} \in \Crules.
\end{gather*}
After this step,
each symbol $\Vsym{y1}, \Vsym{y2}, \dots \Vsym{y-n}$ in the tree string
will corresponds one-to-one with the symbol of the same name in the most recent derivation step.

This step is repeated until there no non-terminals remain in either the tree string or the
most recent derivation step.

Note that corresponding symbols are always introduced together, and consumed together,
at each step of this construction, and that, every symbol in the most recent derivation step
always has a corresponding symbol in the most recent tree string.
Rule markers in the tree string never have corresponding symbols, but all other symbols in
the tree string do.

\end{construction}

\section{Earley's algorithm}
\label{s:earley}

Let $\Vrule{r} \in \Crules$
be a rule,
and $\Vsize{r}$ the length of its RHS.
A dotted rule (type \type{DR}) is a duple, $[\Vrule{r}, \var{pos}]$,
where $0 \le \var{pos} \le \size{\Vrule{r}}$.
The position, \var{pos}, indicates the extent to which
the rule has been recognized,
and is represented with a large raised dot,
so that if
\begin{equation*}
[\Vsym{A} \de \Vsym{X} \cat \Vsym{Y} \cat \Vsym{Z}]
\end{equation*}
is a rule,
\begin{equation*}
[\Vsym{A} \de \var{X} \cat \var{Y} \mydot \var{Z}]
\end{equation*}
is the dotted rule with the dot at
$\var{pos} = 2$,
between \Vsym{Y} and \Vsym{Z}.

If we let \Vdr{x} be a dotted rule, such that
\begin{equation*}
\Vdr{x} =
\bigl[ [\Vsym{A} \de \Vstr{pre} \cat \Vsym{next} \cat \Vstr{post}],
    \var{pos} \bigr],
\end{equation*}
then
%
\begin{gather*}
%
\LHS{\Vdr{x}} \defined \Vsym{A} \\
%
\Postdot{\Vdr{x}} \defined
\begin{cases}
\Vsym{next}, \quad \text{if $\var{x} = [\var{A} \de \var{pre} \mydot \var{next} \cat \var{post}]$} \\
\Lambda, \quad \text{if $\var{x} = [\var{A} \de \var{pre} \cat \var{next} \cat \var{post} \mydot]$}
\end{cases} \\
%
\Next{\Vdr{x}} \defined
\begin{cases}
[\var{A} \de \var{pre} \cat \var{next} \mydot \var{post}],  \\
\qquad \text{if $\Postdot{\Vdr{x}} = \var{next}$} \\
\text{$\Lambda$, otherwise}
\end{cases} \\
%
\Penult{\Vdr{x}} \defined
\begin{cases}
\Vsym{next}, \quad \text{if} \\
\qquad \Postdot{\Vdr{x}} = \var{next} \\
\qquad \land \quad \Vstr{post} \destar \epsilon \\
\qquad \land \quad \neg (\Vsym{next} \destar \epsilon) \\
\Lambda, \quad \text{otherwise}
\end{cases}
%
\end{gather*}

A \dfn{penult} is a dotted rule \Vdr{d} such that $\Penult{\var{d}} \neq \Lambda$.
Note that $\Penult{\Vdr{x}}$
is never a nullable symbol.
The \dfn{initial dotted rule} is
\begin{equation*}
\Vdr{initial} = [\Vsym{accept} \de \mydot \Vsym{start} ].
\end{equation*}
A \dfn{predicted dotted rule} is a dotted rule,
other than the initial dotted rule,
with a dot position of zero,
for example,
\begin{equation*}
\Vdr{predicted} = [\Vsym{A} \de \mydot \Vstr{alpha} ].
\end{equation*}
A \dfn{confirmed dotted rule}
is the initial dotted rule,
or a dotted rule
with a dot position greater than zero.
A \dfn{completed dotted rule} is a dotted rule with its dot
position after the end of its RHS,
for example,
\begin{equation*}
\Vdr{completed} = [\Vsym{A} \de \Vstr{alpha} \mydot ].
\end{equation*}
Predicted, confirmed and completed dotted rules
are also called, respectively,
\dfn{predictions}, \dfn{confirmations} and \dfn{completions}.

\section{Tree predicates}
\label{s:tree-predicates}

\begin{subequations}

An tree predicate is is a triple
\begin{equation*}
    [\Vdr{dotted-rule}, \Vloc{origin}, \Vloc{dot}].
\end{equation*}
Let
\begin{equation*}
    \Vdr{dotted-rule} = [\Vsym{LHS} \de \Vsf{predot} \mydot \Vsf{postdot}].
\end{equation*}
The tree predicate
\begin{equation}
    \bigl[
\label{e:tree-predicate-1} [\Vsym{LHS} \de \Vsf{predot} \mydot \Vsf{postdot}]
    , \Vloc{origin}, \Vloc{dot} \bigr]
\end{equation}
is valid for grammar \var{g}
if and only if,
for some \Vsf{after},
\begin{gather}
\label{e:tree-predicate-2}
  \Vsym{LHS} \de \Vsf{predot} \mydot \Vsf{postdot} \in \Crules, \\
\label{e:tree-predicate-3}
  \Vsym{S} \destar \Cwrange{0}{\var{origin}-1} \cat \Vsym{LHS} \cat \Vsf{after} \quad \text{and} \\
\label{e:tree-predicate-4}
  \Vsf{predot} \destar \Cwrange{\var{origin}}{\Vloc{dot}-1}.
\end{gather}

We define the \dfn{input length} of any substring of a Wich tree, $\Tsize{\Vws{ws}}$,
as its length, counting only terminals.
Wich trees contain only rule markers and terminals,
but Wich derivations may also contain non-terminals.
If a Wich derivation is a cut of a substring of a Wich tree,
its terminals length is the same as that of the original substring.
By definition Wich trees do not contain ambiguities,
so that for a given Wich tree, cut and substring,
the terminals length is always well defined.
The \dfn{input position} of
the \var{i}'th symbol
of a Wich derivation
is the input length of the substring from symbols 0 to $\var{i} \subtract 1$.
Intuitively, the input position of a Wich symbol is the input length
of its prefix.

\begin{theorem}
Let
\begin{gather}
[[\var{A} \de \var{before} \mydot \var{after} ], i, j] \\
\quad \text{where} \quad \Vrule{R} = [\Vsym{A} \de \Vsf{before} \Vsf{after} ]
\end{gather}
be a tree predicate in a tree.
Then a cut of the Wich tree will be of form
\begin{equation}
\label{e:tp-to-wich-1} \Vws{forest1} \cat \ruleMarker{\var{R}} \cat \var{rhs1} \cat \var{rhs2} \cat \Vws{forest2}
\end{equation}
where the input position of \var{rhs1} is \var{i}
and the input position of \var{rhs1} is \var{j}.
$\blacklozenge$
\end{theorem}

\begin{proof}
By the definition of tree predicate,
we know that the derivation tree will have the derivation step
\begin{equation}
\Vsf{before} \cat \Vsym{A} \Vsf{after} \derives \Vsf{before} \cat \Vsf{rhs1} \cat \Vsf{rhs2} \cat \Vsf{after}
\end{equation}
and \eqref{e:tp-to-wich-1} 
follows from the procedure for constructing Wich derivations
from the traditional ones.
Since this is a tree, for each substring of a cut the terminal count is
well-defined.
By the definition of a tree predicate,
we know that
\begin{equation}
\label{e:tp-to-wich-2} 
  \Vsf{rhs1} \destar \Cwrange{\var{i}}{\Vloc{j}-1},
\end{equation}
which means the the input position of \var{rhs1} must be \var{i},
and that the input position of the symbol following it must be
\var{j}.
From \eqref{e:tp-to-wich-2},
we know that the symbol following \var{rhs1} is \var{rhs2},
so that the input position of \var{rhs2} is \var{j}.
\end{proof}

\end{subequations}

\section{An approach to the Earley algorithm}
\label{s:earley-approach}

Tree predicates are often treated as Earley items.
An Earley item (type \type{EIM}) is a duple
\[
    [\Vdr{dotted-rule}, \Vorig{x}]
\]
of dotted rule and origin.
The origin is the location where recognition of the rule
started.
It is sometimes called the ``parent''.
For convenience, the type \type{ORIG} will be a synonym
for \type{LOC}, indicating that the variable designates
the origin element of an Earley item.

An Earley set (type \type{ES}) is a set of Earley items at a single dot location,
call it \Vloc{j},
so that every Earley item $[\Vdr{dotted-rule}, \Vorig{i}]$
in an Earley set corresponds one-to-one with
the tree predicate
\begin{equation*}
[\Vdr{dotted-rule}, \Vorig{i}, \Vloc{i}].
\end{equation*}

An Earley table is a set of Earley sets.
An Earley parser builds a table of Earley sets,
\begin{equation*}
\EVtable{\Earley}{i},
\quad \text{where} \quad
0 \le \Vloc{i} \le \size{\Cw}.
\end{equation*}
Earley sets are of type \type{ES}.
Earley sets are often named by their location,
so that \Ves{i} means the Earley set at \Vloc{i}.
The type designator \type{ES} is sometimes omitted.

Tree predicates and Earley items (EIM's) can be separated into
classes based on their predot symbol.
If a tree predicate or EIM has no predot symbol, it is a prediction.
If the predot symbol is a terminal, it is scanned tree predicate (EIM),
or a scansion.
If the predot symbol is a non-terminal,
it is fused tree predicate (EIM), or a fusion.

If a tree predicate (EIM) is not a prediction,
that is, if it is either a fusion or a scansion,
it can be called a reduction.
Reductions and predictions are disjoint sets.
Note that, in Marpa, terminals
and non-terminals are not disjoint,
so that scansions and fusions are not disjoint sets.
It is possible for a EIM (and therefore its corresponding tree predicate,
to be
both a scansion and a fusion in the same Earley set of the same
parse.

We say that the Earley item is valid in Earley set
if and only if
the corresponding tree predicate is valid.
Let \var{X} be one of the EIM classifications: prediction,
scansion, fusion or reduction.
We say that an Earley set is correct up to \var{X}
if and only if all of Earley items of type \var{X} are correct.
We say that an Earley set is complete up to \var{X},
if and only if it contains every correct Earley item of type \var{X}.
We say that an Earley set is valid up to \var{X},
if and only if it is correct and complete up to \var{X}.
For example, we say that Earley set \Vloc{i} is correct up to scansion
if and only if all of its scanned Earley items are correct.

We say that an Earley set is correct
if and only if all of its Earley items are correct.
We say that an Earley set is complete
if and only if all of its Earley items are complete.
We say that an Earley set is valid
if and only if it is correct and complete.

We say that an Earley table is correct, complete or valid
as far as \Vloc{i}
if and only if every Earley set is, respectively,
correct, complete or valid
as far as \Vloc{i}.
We say that an Earley table is correct, complete or valid
if and only if
all of its Earley sets are correct, complete or valid.

\begin{subequations}

\begin{lemma}
\label{l:eim-correctness-is-transitive}
Let \textup{\Vdr{predecessor}} be a dotted rule,
let \textup{\Vdr{successor}} be its successor,
and let \textup{\Vsym{transition}} be the postdot symbol in
\textup{\Vdr{predecessor}} and the predot symbol in
\textup{\Vdr{successor}}.
If the EIM
\begin{equation}
\label{e:eim-reduction-1}
\textup{
     $\bigl[\Vdr{predecessor}, \Vorig{i} \bigr]$ is correct at \Ves{j},
}
\end{equation}
and
\begin{equation}
\label{e:eim-reduction-2}
\textup{
  $\Vsym{transition} \destar \CVwstr{\var{j}+1,\var{k}}$
}
\end{equation}
where $\var{j} < \var{k}$,
then the EIM 
\begin{equation}
\label{e:eim-reduction-3}
\textup{
     $\bigl[\Vdr{successor}, \Vorig{i} \bigr]$ at \Ves{k}
}
is correct.
\end{equation}
\end{lemma}

\begin{proof}
Let \Vdr{predecessor} be the dotted rule
\begin{equation}
\textup{ $[\Vsym{lhs} \de \Vsf{before} \mydot \Vsym{transition} \cat \Vsf{after}].$ }
\end{equation}
\Vdr{successor} is therefore
\begin{equation}
\label{e:eim-reduction-3-1}
[\Vsym{lhs} \de \Vsf{before} \cat \Vsym{transition} \mydot \Vsf{after}].
\end{equation}
From assumption \eqref{e:eim-reduction-1}, we know that
\begin{equation}
\label{e:eim-reduction-4}
 \Vsym{start} \destar
   \CVwstr{0,\Vloc{i} - 1} \cat \Vsym{transition} \cat \Vsf{post-rule}.
\end{equation}
Also from \eqref{e:eim-reduction-1},
we have
\begin{equation}
\label{e:eim-reduction-5}
  \Vsf{before} \destar \CVwstr{i,j}.
\end{equation}
Combining
\eqref{e:eim-reduction-5}
with the assumption \eqref{e:eim-reduction-2},
we have
\begin{equation}
\label{e:eim-reduction-6}
  \Vsf{before} \cat \Vsym{transition} \destar \CVwstr{i,k}.
\end{equation}

If, for substitution in the definition of tree prediction validity,
we match \eqref{e:eim-reduction-3-1} with \eqref{e:tree-predicate-2},
\eqref{e:eim-reduction-4} with \eqref{e:tree-predicate-3}
and
\eqref{e:eim-reduction-6} with \eqref{e:tree-predicate-4},
we see that the tree predicate
\begin{equation}
[ \Vdr{successor}, \var{i}, \var{k} ]
\end{equation}
is valid.
And, by the definition of an Earley item,
this tree predicate is 
equivalent to
\eqref{e:eim-reduction-3}.
\end{proof}

\end{subequations}

\begin{subequations}

\begin{theorem}
\label{l:eim-prediction-correctness}
Let \Vdr{cause} be a dotted rule,
where $\Vsym{transition} = \Postdot{\var{cause}}$.
\Vdr{cause}.
If the EIM
\begin{equation}
\label{e:eim-prediction-1}
     \bigl[\Vdr{cause}, \Vorig{i} \bigr]
     \text{ is correct at \Ves{j},}
\end{equation}
and
\begin{gather}
\label{e:eim-prediction-2}
  \Vsym{transition} \de \Vsym{initial} \cat \Vsf{remainder} \quad \text{and} \\
\label{e:eim-prediction-2-5}
  \Vsym{initial} \de \Vsf{rhs}
\end{gather}
are rules
then the EIM 
\begin{equation}
\label{e:eim-prediction-3}
     \bigl[ [ \Vsym{initial} \de \mydot \Vsf{rhs} ], \Vorig{j} \bigr]
     \text{ at \Ves{j}}
\end{equation}
is correct.
\end{theorem}

\begin{proof}
Let \Vdr{cause} be the dotted rule
\begin{equation}
\label{e:eim-prediction-3-5}
[\Vsym{lhs} \de \Vsf{before} \mydot \Vsym{transition} \cat \Vsf{after}].
\end{equation}
From assumption \eqref{e:eim-prediction-1}, we know that
\begin{equation}
\label{e:eim-prediction-4-5}
 \Vsym{start} \destar
   \Cwrange{0}{\Vloc{j} \negthickspace - 1}
   \mydot \Vsym{transition} \cat \Vsf{post-rule}.
\end{equation}

From \eqref{e:eim-prediction-4-5}
and \eqref{e:eim-prediction-2}, we know that
\begin{multline}
\label{e:eim-prediction-4-7}
 \Vsym{start} \destar \\
   \Cwrange{0}{\Vloc{j} \negthickspace - 1}
     \mydot \Vsym{initial} \cat \Vsf{remainder} \cat \Vsf{post-rule}.
\end{multline}

For substitution in the definition of tree prediction validity,
we match the rule
$[\Vsym{initial} \de \Vsf{rhs}]$
with \eqref{e:tree-predicate-2}
and \eqref{e:eim-prediction-4-7} with \eqref{e:tree-predicate-3}.
For \Vsf{predot} in
\eqref{e:tree-predicate-3}
and \eqref{e:tree-predicate-4},
we substitute the empty sentential form,
so that 
\begin{equation}
\Vsf{predot} \destar \epsilon
\end{equation}
matches \eqref{e:tree-predicate-4}.

With these substitutions in the definition
of tree prediction validity,
we see that the tree predicate
\begin{equation}
\bigl[ [\Vsym{initial} \de \Vsf{rhs}], \Vloc{j}, \Vloc{j} \bigr]
\end{equation}
is valid.
And, by the definition of an Earley item,
this tree predicate is 
equivalent to
\eqref{e:eim-prediction-3}.

\end{proof}

\end{subequations}

\section{Operations of the Earley algorithm}
\label{s:earley-ops}

Because the Marpa project's motivation is implementation,
this paper will describe the Marpa algorithm,
and prove its correctness, using pseudo-code.
Nonetheless, this section's more abstract outline,
as rules of inference whose closure produces all the
valid tree predicates
may be helpful as an briefer introduction.
\footnote{
Among the many
more formal presentations of the Earley algorithm,
we found that of ~\cite{Wich2005} especially elegant
and useful.
}
We will also use it as a framework within which to define
this {\doc}'s terminology.

Consider \var{Initial}, the singleton set of tree predicates,
containing only the initial tree predicate, as follows:
\begin{equation}
    \Bigset{ \bigl[ [ \Vsym{accept} \de \mydot \Vsym{start} ], 0, 0 \bigr] }
\end{equation}
The set of valid tree predicts will be the closure of \var{Initial} under
three operations: the scanner, the fuser and the predictor.
In the following, \var{g} will be an arbitrary grammar in Marpa internal form,
and \Cw will be an arbitrary input.

\subsection{Scanner}

For abitrary \Vsym{lhs}, \Vsf{before}, \Vsf{after}, \Vloc{i}, \Vloc{j},
where
\begin{gather*}
    \Vdr{before} = [ \Vsym{lhs} \de \Vsf{before} \mydot \CVw{\var{j}+1} \cat \Vsf{after} ]
      \quad \text{and} \\
    \Vdr{after} = [ \Vsym{lhs} \de \Vsf{before} \cat \CVw{\var{j}+1} \mydot \Vsf{after} ], \\
\end{gather*}
from any tree predicate of the form
\begin{equation*}
 \Vtp{predecessor} = [ \Vdr{before}, \var{i}, \var{j} ]
\end{equation*}
infer the tree predicate
\begin{equation*}
 \Vtp{scansion} = [ \Vdr{after}, \var{i}, \var{j}+1 ] .
\end{equation*}

In this case, \Vtp{predecessor} is the \dfn{predecessor} and \Vtp{scansion} is the \dfn{successor}.
$\CVw{\var{j}+1}$ is the \dfn{cause} and \Vtp{scansion} is the \dfn{effect}.
$\CVw{\var{j}+1}$ is also called the \dfn{transition symbol}
of the scanner operation.
\Vtp{scansion} is called a \dfn{scanned Earley item}
or a \dfn{scansion}.
The \dfn{antecedents} of the scansion are a duple:
its cause ($\CVw{\var{j}+1}$) and its predecessor.

\subsection{Fuser}

For abitrary \Vsym{lhs}, \Vsf{before}, \Vsf{after}, \Vsym{trans}, \Vsf{rhs},
\Vloc{i}, \Vloc{j}, \Vloc{k},
where
\begin{gather*}
    \Vdr{before} = [ \Vsym{lhs} \de \Vsf{before} \mydot \Vsym{trans} \cat \Vsf{after} ]
      \quad \text{and} \\
    \Vdr{after} = [ \Vsym{lhs} \de \Vsf{before} \cat \Vsym{trans} \mydot \Vsf{after} ], \\
\end{gather*}
from any two tree predicates of the form
\begin{gather*}
 \Vtp{predecessor} = [ \Vdr{before}, \var{i}, \var{j} ] \\
 \Vtp{component} = \bigl[ [ \Vsym{trans} \de \Vsf{rhs} \mydot ], \var{j}, \var{k} \bigr]
\end{gather*}
infer the tree predicate
\begin{equation*}
 \Vtp{fusion} = [ \Vdr{after}, \var{i}, \var{k} ] .
\end{equation*}

In this case, \Vtp{predecessor} is the \dfn{predecessor} and \Vtp{fusion} is the \dfn{successor}.
\Vtp{component} is the \dfn{cause} and \Vtp{scansion} is the \dfn{effect}.
\Vsym{trans} is also called the \dfn{transition symbol}
of the scanner operation.
\Vtp{component} is called
the \dfn{component}\footnote{
The term ``component'' comes from Irons \cite{Irons}.
}
of the fusion operation.
\Vtp{fusion} is called a \dfn{fused Earley item}
or a \dfn{fusion}.
The \dfn{antecedents} of the fusion are a duple:
its cause (\Vtp{component})
and its predecessor (\Vtp{predecessor}).

What we call a fusion in this \doc{}.
is traditionally called a completion.
The older terminology is overloaded in an
extremely confusing way,
and we hope that readers will view
our departure from it with
more relief than annoyance.\footnote{
A completion can be either the outcome
of a completer operation (sense 1), or an Earley item with the dot
at the end of the rule (sense 2).
A completion in sense 1 may or may not be a completion in sense 2.
On the other hand, the cause of a completion in sense 1 must always
be a completion in sense 2.
In this \doc, the term ``completion'' will only be used in sense 2.
Use of the term ``completion''
in the traditional sense 1
is abandoned in favor of the term ``fusion''.
}

\subsection{Predicter}

For abitrary \Vsym{lhs}, \Vsf{before}, \Vsf{after}, \Vsym{postdot}, \Vsf{rhs},
\Vloc{i}, \Vloc{j},
where
\begin{equation*}
    \Vdr{before} = [ \Vsym{lhs} \de \Vsf{before} \mydot \Vsym{postdot} \cat \Vsf{after} ] 
\end{equation*}
from any tree predicate of the form
\begin{equation*}
 \Vtp{cause} = [ \Vdr{before}, \var{i}, \var{j} ] \\
\end{equation*}
and any rule of the form
\begin{equation*}
 \Vrule{predicted} = [ \Vsym{postdot} \de \Vsf{rhs} ],
\end{equation*}
infer the tree predicate
\begin{equation*}
 \Vtp{prediction} = \bigl[ [ \Vsym{postdot} \de \mydot \Vsf{rhs} ], \var{j}, \var{j} \bigr].
\end{equation*}

In this case,
\Vtp{cause} is the \dfn{cause} and \Vtp{prediction} is the \dfn{effect}.
\Vtp{prediction} is called a \dfn{predicted} tree predicate
or a \dfn{prediction}.
The \dfn{antecedents} of the prediction are a duple:
its cause (\Vtp{cause})
and the prediction's rule (\Vrule{rule}).

\subsection{Earley items}

The inferences described above in terms of tree predicates can also
be described in terms of Earley items.
All terms defined for tree predicates are applied to the
corresponding Earley items as well.

\section{Leo memoization}
\label{s:leo-memoization}

To
deal with right recursion in linear time,
Marpa memoizes certain Earley item completions,
using the technique of
\cite{Leo1991}.
A Leo item (LIM) is the triple
\begin{equation*}
[ \Vdr{top}, \Vsym{transition}, \Vorig{top} ]
\end{equation*}
where \Vsym{transition} is the transition symbol.
Like EIM's,
each LIM is associated with a specific Earley set.
When a LIM is associated with an Earley set \Ves{i},
that LIM is said to be ``in'' \Ves{i}.
\Ves{i} is also said to ``contain'' the LIM.

Let
\begin{gather*}
  \Vrule{memo} = [ \Vsym{lhs} \de \Vsf{pre-final} \cat \Vsym{transition} ] \\
  \Vrule{cause} = [ \Vsym{transition} \de \Vsf{cause-lhs} ]
\end{gather*}
be a rule in the grammar.
Let \Vdr{summit} be a dotted rule.
and \Vorig{summit} and \Vorig{memo} be two locations,
where
$\Vorig{summit} \le \Vorig{memo}$.
\Vrule{memo}, \Vrule{cause} and
the rule of \Vdr{summit} may or may not be distinct.
We say that an Earley item \Ves{i} is {\bf Leo-memoized} if it is
\begin{equation*}
\bigl[ [ \Vsym{lhs} \de \Vsf{pre-final} \Vsym{transition} \mydot ],
  \Vorig{memo} \bigr].
\end{equation*}
where Earley set \Ves{l} physically
contains the Leo item
\begin{equation*}
[ \Vdr{summit}, \Vsym{transition}, \Vorig{summit} ].
\end{equation*}
and physically contains the Earley item
\begin{equation*}
\Veim{predecessor} =
\bigl[ [ \Vsym{lhs} \de \Vsf{pre-final} \mydot \Vsym{transition} ],
  \Vorig{memo} \bigr].
\end{equation*}
%
and
%
\begin{equation*}
\Veim{cause} =
\bigl[ [ \Vsym{transition} \de \Vsf{cause-rhs} \mydot ],
  \Vorig{l} \bigr]
\end{equation*}
is either physically contained or memoized at \Ves{i}.
Quite often we will simply say that a Leo-memoized
is {bf memoized}.

\Veim{predecessor} must be physically present in the Earley sets,
but \Veim{cause} may also be Leo-memoized, so that memoized Earley items
form ``trails'', starting with a physical Earley item which is the
``trailhead'', and leading to a {bf summit}.
All the Earley items on a Leo
trail are completions.

Detailed description of Leo memoization can be found in
\cite{Leo1991}, and details of Marpa's implementation
and proofs of correctness and the complexity claims
will follow.
Here we will make some comments as aids to the intuition.

The Leo memoization is only intended to memoize deterministic
Leo trails, something which the implementation guarantees.
This means that, in the above,
the choice of \Veim{predecessor} can be expected to be unique.
no other Earley item in \Ves{memo} will have \Vsym{transition}
as its postdot symbol.
When this is not the cause, the Leo item is not created.

Not creating a Leo item is always safe.
The omission of Leo items has no effect
on correctness -- they are purely memoizations for efficiency.

Leo's memoization was created in response to the problems
presented to Earley's algorithm by right recursion.
Right recursion presented time and space complexity problems
for Earley's original algorithm.
Whenever Earley's did not
know whether an Earley set was going to be the last in a right recursion,
it needed to physically track the potential completions in that set.
The length of these chains of completion grew linearly with the length of the
right recursion and, as a result, time and space for right recursion in
Earley's original algorithm was quadratic.

Leo's memoization lets the top and bottom of the Leo trail (which we call its
``summit'' and ``trailhead'', respectively)
stand in for the entire trail.
The full Leo trail can be reconstructed afterwards using the Leo items,
once location where the right recursion ends is known.
Marpa performs this reconstruction during its evaluation phase.
The Leo memoization guarantees that, for any deterministic right recursion,
a small, constant number of Earley items and Leo items is sufficient, the
rest being memoized.

Leo's original algorithm did not restrict the use of Leo memoization to
right recursions -- it would also memoize any trails
involving rightmost non-nulling symbols, even those whose maximum length
was a fixed constant.
Leo memoization is not expensive, but it does have some cost, and experience
with the Marpa implementation led us to restruct use of Leo memoization
to those situations in which right recursions,
and therefore Leo trails of arbitrary length, were possible.

The set of Leo-memoized Earley items is {\bf not} disjoint from
the set of Earley items actually in the Earley sets --
an Earley item may be memoized even if it actually exists.

At points,
we will need to compare the Earley sets
produced by the different recognizers.
\EVtable{\alg{Recce}}{i} will be
the Earley set at \Vloc{i}
in the table of Earley sets of
the \alg{Recce} recognizer.
For example,
\EVtable{\Marpa}{j} will be Earley set \Vloc{j}
in \Marpa's table of Earley sets.
In contexts where it is clear which recognizer is
intended,
\Vtable{k}, or \Ves{k}, will symbolize Earley set \Vloc{k}
in that recognizer's table of Earley sets.
If \Ves{working} is an Earley set,
$\size{\Ves{working}}$ is the number of Earley items
in \Ves{working}.

\Rtablesize{\alg{Recce}} is the total number
of Earley items in all Earley sets for \alg{Recce},
\begin{equation*}
\Rtablesize{\alg{Recce}} =
     \sum\limits_{\Vloc{i}=0}^{\size{\Cw}}
	{\bigsize{\EVtable{\alg{Recce}}{i}}}.
\end{equation*}
For example,
\Rtablesize{\Marpa} is the total number
of Earley items in all the Earley sets of
a \Marpa{} parse.

Recall that
there was a unique acceptance symbol,
\Vsym{accept}, in \Cg{}.
The input \Cw{} is accepted if and only if,
for some \Vstr{rhs},
\begin{equation*}
\bigl[[\Vsym{accept} \de \Vstr{rhs} \mydot], 0\bigr] \in \bigEtable{\Vsize{\Cw}}
\end{equation*}

\section{The Leo algorithm}
\label{s:leo}

In \cite{Leo1991}, Joop Leo presented a method for
dealing with right recursion in \On{} time.
Leo shows that,
with his modification, Earley's algorithm
is \On{} for all LR-regular grammars.
(LR-regular is LR where lookahead
is infinite length, but restricted to
distinguishing between regular expressions.)

Summarizing Leo's method,
it consists of spotting potential right recursions
and memoizing them.
Leo restricts the memoization to situations where
the right recursion is unambiguous.
Potential right recursions are memoized by
Earley set, using what Leo called
``transitive items''.
In this \doc{} Leo's ``transitive items''
will be called Leo items,
and will be of type \type{LIM}.

In each Earley set, there is at most one Leo item per symbol.
A Leo item (LIM) is the triple
\begin{equation*}
[ \Vdr{top}, \Vsym{transition}, \Vorig{top} ]
\end{equation*}
where \Vsym{transition} is the transition symbol,
and
\begin{equation*}
\Veim{top} = [\Vdr{top}, \Vorig{top}]
\end{equation*}
is the Earley item to be added on fusions over
\Vsym{transition}.

Leo items memoize what would otherwise be sequences
of Earley items.
Leo items only memoize unambiguous (or
deterministic) sequences,
so that the top of the sequence can represent
the entire sequence --
the only role the other EIM's in the sequence
play in the parse is to derive the top EIM.
We will call these memoized sequences, Leo sequences.

To quarantee that a Leo sequence is deterministic,
\Leo{} enforced \dfn{Leo uniqueness}.
Define containment of a dotted rule in a Earley set
of EIM's as
\begin{equation*}
\begin{split}
& \mymathop{Contains}(\Ves{i}, \Vdr{d}) \defined \exists \, \Veim{b}, \Vorig{j} \mid  \\
& \qquad \Veim{b} = [ \Vdr{d}, \Vorig{j} ] 
  \land \Veim{b} \in \Ves{i}.
\end{split}
\end{equation*}
A dotted rule \Vdr{d} is \dfn{Leo unique} in the Earley set
at \Ves{i}
if and only if
\begin{equation*}
\begin{split}
&    \Penult{\Vdr{d}} \neq \Lambda \\
&    \land \forall \, \Vdr{d2} \bigl( \mymathop{Contains}(\Ves{i}, \Vdr{d2}) \implies \\
&    \qquad \Postdot{\Vdr{d}} = \Postdot{\Vdr{d2}} \implies \Vdr{d} = \Vdr{d2} \bigr).
\end{split}
\end{equation*}
If \Vdr{d} is Leo unique, then the symbol $\Postdot{\Vdr{d}}$ is
also said to be \dfn{Leo unique}.
In cases where a symbol \Vsym{transition} is Leo unique in \Ves{i},
we can speak of the dotted rule for \Vsym{transition},
and the rule for \Vsym{transition},
because there can be only one of each.
In the previous definitions,
it is important to emphasize that \Vdr{d2} ranges over all the dotted
rules of Earley set \Ves{i},
even those which are ineligible for Leo memoization.

Let \var{n} be the length of a Leo sequence.
In \Earley, each such sequence would be expanded in every
Earley set that is the origin of an EIM included in the
sequence, and the total number of EIM's would be
\order{\var{n}^2}.

With Leo memoization, a single EIM stands in for the sequence.
There are \Oc{} Leo items per Earley set,
so the cost of the sequence is \Oc{} per Earley set,
or \On{} for the entire sequence.
If, at evaluation time,
it is desirable to expand the Leo sequence,
only those items actually involved in the parse
need to be expanded.
All the EIM's of a potential right-recursion
will be in one Earley set and the number of EIM's
will be \On{},
so that even including expansion of the Leo sequence
for evaluation, the time and space complexity of
the sequence remains \On{}.

\begin{sloppypar}
Recall that we
call a dotted rule \Vdr{d} a \dfn{penult} if $\Penult{\var{d}} \neq \Lambda$.
In Leo's original algorithm, any penult
was treated as a potential right-recursion.
\Marpa{} applies the Leo memoizations in more restricted circumstances.
For \Marpa{} to consider a dotted rule
\begin{equation*}
\Vdr{candidate} = [\Vrule{candidate}, \var{i}]
\end{equation*}
for Leo memoization,
\Vdr{candidate} must be a penult and
\Vrule{candidate} must be right-recursive.
\end{sloppypar}

By restricting Leo memoization to right-recursive rules,
\Marpa{} incurs the cost of Leo memoization only in cases
where Leo sequences could be infinitely
long.
This more careful targeting of the memoization is for efficiency reasons.
If all penults are memoized,
many memoizations will be performed where
the longest potential Leo sequence is short,
and the payoff is therefore very limited.

Omission of a memoization does not affect correctness,
so \Marpa{}'s restriction of Leo memoization
preserves the correctness as shown in Leo\cite{Leo1991}.
Later in this \doc{} we will
show that this change also leaves
the complexity results of 
Leo\cite{Leo1991} intact.

\section{The Marpa Recognizer}
\label{s:pseudocode}

\subsection{Complexity}

Alongside the pseudocode of this section
are observations about its space and time complexity.
In what follows,
we will charge all time and space resources
to Earley items,
or to attempts to add Earley items.
We will show that,
to each Earley item actually added,
or to each attempt to add a duplicate Earley item,
we can charge amortized \Oc{} time and space.

At points, it will not be immediately
convenient to speak of
charging a resource
to an Earley item
or to an attempt to add a duplicate
Earley item.
In those circumstances,
we speak of charging time and space
\begin{itemize}
\item to the parse; or
\item to the Earley set; or
\item to the current procedure's caller.
\end{itemize}

We can charge time and space to the parse itself,
as long as the total time and space charged is \Oc{}.
Afterwards, this resource can be re-charged to
the initial Earley item, which is present in all parses.
Soft and hard failures of the recognizer use
worst-case \Oc{} resource,
and are charged to the parse.

We can charge resources to the Earley set,
as long as the time or space is \Oc{}.
Afterwards,
the resource charged to the Earley set can be
re-charged to an arbitrary member of the Earley set,
for example, the first.
If an Earley set is empty,
the parse must fail,
and the time can be charged to the parse.

In a procedure,
resource can be ``caller-included''.
Caller-included resource is not accounted for in
the current procedure,
but passed upward to the procedure's caller,
to be accounted for there.
A procedure to which caller-included resource is passed will
sometimes pass the resource upward to its own caller,
although of course the top-level procedure does not do this.

For each procedure, we will state whether
the time and space we are charging is inclusive or exclusive.
The exclusive time or space of a procedure is that
which it uses directly,
ignoring resource charges passed up from called procedures.
Inclusive time or space includes
resource passed upward to the
current procedure from called procedures.

Earley sets may be represented by \Ves{i},
where \var{i} is the Earley set's locaiton \Vloc{i}.
The two notations should be regarded as interchangeable.
The actual implementation of either
should be the equivalent of a pointer to 
a data structure containing,
at a minimum,
the Earley items,
the Leo items,
a memoization of the Earley set's location as an integer,
and a per-set-list.
Per-set-lists will be described in Section \ref{s:per-set-lists}.

\begin{algorithm}[h]
\caption{Marpa Top-level}
\begin{algorithmic}[1]
\Procedure{Main}{}
\State \Call{Initial}{}
\For{ $\var{i}, 0 \le \var{i} \le \Vsize{w}$ }
\State \Comment At this point, $\Ves{x}$ is complete, for $0 \le \var{x} < \var{i}$
\State \Call{Scan pass}{$\var{i}, \var{w}[\var{i} \subtract 1]$}
\If{$\size{\Ves{i}} = 0$}
\State reject \Cw{} and return
\EndIf
\State \Call{Fusion pass}{\var{i}}
\State \Call{Prediction pass}{\var{i}}
\EndFor
\State \Call{Accept or Reject Logic}{}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Complexity of Marpa Top-level}

Exclusive time and space
for the loop over the Earley sets,
including any time passed up from the 
\call{Scan pass}{},
\call{Fusion pass}{},
and \call{Prediction pass}{},
is charged to the Earley sets.
Overhead is charged to the parse.
All these resource charges are \Oc{}.

\subsection{Ruby Slippers parsing}
The Marpa parse engine is different from previous Earley
parse engines in separating
the \call{Scan pass}{}, on one hand, from
\call{Fusion pass}{},
and \call{Prediction pass}{}, on the other.
Because of this separation,
when the scanning of tokens that start at location \Vloc{i} begins,
the Earley sets for all locations prior to \Vloc{i} are complete.

As a result, there is a point at which the parser can pause,
after the Earley set at \Vloc{i} is completely built,
but before any tokens which begin at location \Vloc{i} have
been scanned.
An application may examine the state of the parse,
and may alter the input in response to what it finds.

\begin{algorithm}[h]
\caption{Marpa Top-level}
\begin{algorithmic}[1]
\Procedure{Accept or Reject Logic}{}
\If{$[\Vdr{accept}, 0] \in \Etable{\Vsize{w}}$}
\State accept \Cw{}
\Else
\State reject \Cw{}
\EndIf
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Complexity of Accept or Reject Logic}

The time and space complexity is clearly \Oc{},
which is caller-included.
The caller will include charge this time and space
to the parse.

\begin{algorithm}[h]
\caption{Initialization}
\begin{algorithmic}[1]
\Procedure{Initial}{}
\State \Call{Add EIM}{$0_{ES}, \Vdr{start}, 0$}
\State \Call{Prediction pass}{$0_{ES}$}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Initialization}
\label{p:initial-op}

Inclusive time and space is \Oc{}
and is charged to the parse.

\subsection{Prediction pass}
\label{p:prediction-op}

\begin{algorithm}[h]
\caption{Prediction pass}
\label{a:prediction-pass}
\begin{algorithmic}[1]
\Procedure{Prediction pass}{\Vloc{i}}
\State Note: Let \var{stack} be a stack of rules.
\State Let \var{seen} be the set of rules which have already
\State \hspace{2.5em} been put on the stack.
\State Initially, \var{stack} and \var{seen} are empty,
\For{each Earley item $\Veim{work} \in \Vtable{i}$}
\label{a:prediction-pass-loop1}
\State $[\Vdr{work}, \Vloc{origin}] \gets \Veim{work}$
\State \Call{Predict from dotted rule}{\Vdr{work}, \var{stack}, \var{seen}}
\EndFor
\For{each \Vrule{work} on working stack}
\State Note: Where $\Vrule{predict} = \Vsym{lhs} \de \Vsf{rhs}$
\State $\Vdr{predict} \gets [ \Vsym{lhs} \de \mydot \Vsf{rhs} ]$
\State \Call{Add EIM}{\Ves{i}, \Vdr{predict}, \Vorig{i}}
\State \Call{Predict from dotted rule}{\Vdr{predict}, \var{stack}, \var{seen}}
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\begin{algorithm}[h]
\caption{Push predictions onto stack}
\begin{algorithmic}[1]
\Procedure{Predict from dotted rule}{\Vdr{x}, \var{stack}, \var{seen}}
\State Let $\var{predictions}$ be all \Vrule{x} such that
\State \hspace{2.5em} the LHS of \Vrule{x} is $\Postdot{\Vdr{x}}$
\For{each $\Vrule{prediction} \in \var{predictions}$}
\If{$\var{prediction} \notin \var{seen}$}
\State Push \Vrule{prediction} onto the working stack
\State Add \Vrule{prediction} to \var{seen}
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{The prediction pass is correct}
\label{p:prediction-correct}

\begin{theorem}
Algorithm~\ref{a:prediction-pass} is correct.
\end{theorem}

\begin{proof}
Examination of \ref{a:prediction-pass} will show
each an Earley item corresponds to a tree
predicate that meets the criteria of
Theorem~\ref{l:eim-prediction-correctness}.
for correctness.
\end{proof}

\subsection{The prediction pass is complete}
\label{p:prediction-complete}

\begin{theorem}
If called when Earley set \Vloc{j} is either complete
up to reductions,
or contains the start Earley item, then
Algorithm~\ref{a:prediction-pass} is complete.
\end{theorem}

\begin{proof}
The cause of a prediction is either the start Earley item,
another prediction,
or a reduction.
From
Theorem~\ref{l:eim-prediction-correctness},
we see that a complete set of predictions can
be found by examining all possible pairs of
Earley items (causes) and rules.
From
Theorem~\ref{l:eim-prediction-correctness},
we can also see that
the cause of a prediction must be an Earley item that
is valid in the
same Earley set,
and that the rule must have, as its LHS,
the postdot symbol of the cause.

For this proof, we will call a prediction ``direct'' if
its cause is the initial Earley item or a reduction.
We will call a prediction ``indirect'' if it is not a direct
prediction.
We can see directly that
the cause of an indirect prediction must be a prediction
which is not the initial Earley item.

The loop near \label{a:prediction-pass-loop1} can be seen to
examine, and use as causes, all Earley items already in
Earley set \Vloc{j}, and as rules,
all rules whose LHS is their postdot symbol.
By assumption this includes the start item, if it is correct,
as well as any valid reductions.
This shows that 
Algorithm~\ref{a:prediction-pass} will leave
the Earley set \var{j} complete up to all direct predictions.

To show that Algorithm~\ref{a:prediction-pass} leaves
complete up to indirect predictions,
we first note if the sequence leads to a cycle,
it will be terminated at the first prediction that has
already been placed on the working stack.
This means that all sequences will be finite.
It can be seen that, once a rule has been put on the
working stack,
placing it on the stack again will add no new Earley item
predictions, so that it is safe to
terminate a cycle at the first repetition.

From this, we see that all sequences of indirect predictions
will be finite.
An induction on the length of the sequences,
with the direct predictions as the base,
will show that 
Algorithm~\ref{a:prediction-pass} adds all indirect predictions.

We have seen that Algorithm~\ref{a:prediction-pass}
leaves Earley set \var{j} complete up to both direct and indirect
predictions.
Therefore Algorithm~\ref{a:prediction-pass}
leaves Earley set \var{j} complete up to predictions.
\end{proof}

\subsection{The scan pass}
\label{p:scan-op}

\var{transitions} is a set of tables, one per Earley set.
The tables in the set are indexed by symbol.
Symbol indexing is \Oc{}, since the number of symbols
is a constant, but
since the number of Earley sets grows with
the length of the parse,
it cannot be assumed that Earley sets can be indexed by location
in \Oc{} time.
For the operation $\var{transitions}(\Vloc{l}, \Vsym{s})$
to be in \Oc{} time,
\Vloc{l} must represent a link directly to the Earley set.
In the case of scanning,
the lookup is always in the previous Earley set,
which can easily be tracked in \Oc{} space
and retrieved in \Oc{} time.
Inclusive time and space can be charged to the
\Veim{predecessor}.
Overhead is charged to the Earley set at \Vloc{i}.

\begin{algorithm}[h]
\caption{Marpa Scan pass}
\begin{algorithmic}[1]
\Procedure{Scan pass}{$\Vloc{i},\Vsym{a}$}
\State Note: Each pass through this loop is an EIM attempt
\For{each $\Veim{predecessor} \in \var{transitions}((\var{i} \subtract 1),\var{a})$}
\State $[\Vdr{from}, \Vloc{origin}] \gets \Veim{predecessor}$
\State $\Vdr{to} \gets \GOTO(\Vdr{from}, \Vsym{a})$
\State \Call{Add EIM}{$\Ves{i}, \Vdr{to}, \Vloc{origin}$}
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Correctness of the scan pass}
\label{p:scan-correct}

\subsection{Completeness of the scan pass}
\label{p:scan-complete}

\begin{algorithm}[h]
\caption{Fusion pass}
\begin{algorithmic}[1]
\Procedure{Fusion pass}{\Vloc{i}}
\State Note: \Vtable{i} may include EIM's added
\State \hspace{2.5em} during passes of the loop
\State \hspace{2.5em} by \Call{Fuse one LHS}{}.
\State \hspace{2.5em} The loop must traverse these.
\For{each Earley item $\Veim{work} \in \Vtable{i}$}
\State $[\Vdr{work}, \Vloc{origin}] \gets \Veim{work}$
\State $\Vsymset{lh-sides} \gets$ a set containing the LHS
\State \hspace\algorithmicindent of every completed rule in \Veim{work}
\For{each $\Vsym{lhs} \in \Vsymset{lh-sides}$}
\State \Call{Fuse one LHS}{\Vloc{i}, \Vloc{origin}, \Vsym{lhs}}
\EndFor
\EndFor
\State \Call{Memoize transitions}{\Vloc{i}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Fusion pass}

The loop over \Vtable{i} must also include
any items added by \call{Fuse one LHS}{}.
This can be done by implementing \Vtable{i} as an ordered
set and adding new items at the end.

Exclusive time is clearly \Oc{} per
\Veim{work},
and is charged to the \Veim{work}.
Additionally,
some of the time required by
\call{Fuse one LHS}{} is caller-included,
and therefore charged to this procedure.
Inclusive time from \call{Fuse one LHS}{}
is \Oc{} per call,
as will be seen in section \ref{p:fuse-one-lhs},
and is charged to the \Veim{work}
that is current
during that call to \call{Fuse one LHS}{}.
Overhead may be charged to the Earley set at \Vloc{i}.

\subsection{Correctness of the fusion pass}
\label{p:fusion-correct}

\subsection{Completeness of the fusion pass}
\label{p:fusion-complete}

\begin{algorithm}[h]
\caption{Memoize transitions}
\begin{algorithmic}[1]
\Procedure{Memoize transitions}{\Vloc{i}}
\For{every \Vsym{postdot}, a postdot symbol of $\Ves{i}$}
\State Note: \Vsym{postdot} is ``Leo eligible" if it is
\State \hspace\algorithmicindent  Leo unique and its rule is right recursive
\If{\Vsym{postdot} is Leo eligible}
\State Set $\var{transitions}(\Vloc{i},\Vsym{postdot})$
\State \hspace\algorithmicindent to a LIM
\Else
\State Set $\var{transitions}(\Vloc{i},\Vsym{postdot})$
\State \hspace\algorithmicindent to the set of EIM's that have
\State \hspace\algorithmicindent \Vsym{postdot} as their postdot symbol
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Memoize transitions}

The \var{transitions} table for \Ves{i}
is built once all EIMs have been
added to \Ves{i}.
We first look at the resource,
excluding the processing of Leo items.
The non-Leo processing can be done in
a single pass over \Ves{i},
in \Oc{} time per EIM.
Inclusive time and space are charged to the
Earley items being examined.
Overhead is charged to \Ves{i}.

We now look at the resource used in the Leo processing.
A transition symbol \Vsym{transition}
is Leo eligible if it is Leo unique
and its rule is right recursive.
(If \Vsym{transition} is Leo unique in \Ves{i}, it will be the
postdot symbol of only one rule in \Ves{i}.)
All but one of the determinations needed to decide
if \Vsym{transition} is Leo eligible can be precomputed
from the grammar,
and the resource to do this is charged to the parse.
The precomputation, for example,
for every rule, determines if it is right recursive.

One part of the test for
Leo eligibility cannot be done as a precomputation.
This is the determination whether there is only one dotted
rule in \Ves{i} whose postdot symbol is
\Vsym{transition}.
This can be done
in a single pass over the EIM's of \Ves{i}
that notes the postdot symbols as they are encountered
and whether any is enountered twice.
The time and space,
including that for the creation of a LIM if necessary,
will be \Oc{} time per EIM examined,
and can be charged to EIM being examined.

\begin{algorithm}[h]
\caption{Fuse one LHS symbol}
\begin{algorithmic}[1]
\Procedure{Fuse one LHS}{\Vloc{i}, \Vloc{origin}, \Vsym{lhs}}
\State Note: If the transitions contain a LIM, that LIM is unique,
\State \hspace{2.5em} we do not look at any of the EIM's.
\If{$\exists \Vlim{lim}, \var{lim} \in \var{transitions}(\Vloc{origin},\Vsym{lhs})$}
\State Perform a \Call{Leo fusion operation}{}
\State \hspace\algorithmicindent for operands \Vloc{i}, \Vlim{pim}
\State return
\EndIf
\State Note: Each pass through this loop is an EIM attempt
\For{each $\var{eim} \in \var{transitions}(\Vloc{origin},\Vsym{lhs})$}
\State Perform a \Call{Earley fusion operation}{}
\State \hspace\algorithmicindent for operands \Vloc{i}, \Veim{pim}, \Vsym{lhs}
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Fuse one LHS}
\label{p:fuse-one-lhs}

To show that
\begin{equation*}
\var{transitions}(\Vloc{origin},\Vsym{lhs})
\end{equation*}
can be traversed in \Oc{} time,
we note
that the number of symbols is a constant
and assume that \Vloc{origin} is implemented
as a link back to the Earley set,
rather than as an integer index.
This requires that \Veim{work}
in \call{Fusion pass}{}
carry a link
back to its origin.
As implemented, Marpa's
Earley items have such links.

Inclusive time
for the loop over the EIM attempts
is charged to each EIM attempt.
Overhead is \Oc{} and caller-included.

\begin{algorithm}[h]
\caption{Earley fusion operation}
\begin{algorithmic}[1]
\Procedure{Earley fusion operation}{\Vloc{i}, \Veim{from}, \Vsym{trans}}
\State $[\Vdr{from}, \Vloc{origin}] \gets \Veim{from}$
\State $\Vdr{to} \gets \GOTO(\Vdr{from}, \Vsym{trans})$
\State \Call{Add EIM}{\Ves{i}, \Vdr{to}, \Vloc{origin}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Earley Fusion operation}
\label{p:fusion-op}

\begin{sloppypar}
Exclusive time and space is clearly \Oc{}.
\call{Earley fusion operation}{} is always
called as part of an EIM attempt,
and inclusive time and space is charged to the EIM
attempt.
\end{sloppypar}

\subsection{Correctness of Earley fusion}
\label{p:earley-fusion-correct}

\subsection{Completeness of Earley fusion}
\label{p:earley-fusion-complete}

\begin{algorithm}[h]
\caption{Leo fusion operation}
\begin{algorithmic}[1]
\Procedure{Leo fusion operation}{\Vloc{i}, \Vlim{from}}
\State $[\Vdr{from}, \Vsym{trans}, \Vloc{origin}] \gets \Vlim{from}$
\State $\Vdr{to} \gets \GOTO(\Vdr{from}, \Vsym{trans})$
\State \Call{Add EIM}{\Ves{i}, \Vdr{to}, \Vloc{origin}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Leo fusion operation}
\label{p:leo-op}

Exclusive time and space is clearly \Oc{}.
\call{Leo fusion operation}{} is always
called as part of an EIM attempt,
and inclusive time and space is charged to the EIM
attempt.

\begin{algorithm}[h]
\caption{Add EIM}\label{a:pair}
\begin{algorithmic}[1]
\Procedure{Add EIM}{$\Ves{i},\Vdr{confirmed}, \Vloc{origin}$}
\State $\Veim{confirmed} \gets [\Vdr{confirmed}, \Vloc{origin}]$
\If{\Veim{confirmed} is new}
\State Add \Veim{confirmed} to \Vtable{i}
\EndIf
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Correctness of Leo fusion}
\label{p:leo-fusion-correct}

\subsection{Completeness of Leo fusion}
\label{p:leo-fusion-complete}

\subsection{Correctness of fusion}
\label{p:fusion-correct}

\subsection{Completeness of fusion}
\label{p:fusion-complete}

\subsection{Adding an Earley item}
\label{p:add-eim}

This operation adds a confirmed EIM.
Inclusive time and space is charged to the
calling procedure.
Trivially, the space is \Oc{} per call.

We show that time is also \Oc{}
by singling out the two non-trivial cases:
checking that an Earley item is new,
and adding it to the Earley set.
\Marpa{} checks whether an Earley item is new
in \Oc{} time
by using a data structure called a PSL.
PSL's are the subject of Section \ref{s:per-set-lists}.
An Earley item can be added to the current
set in \Oc{} time
if Earley set is seen as a linked
list, to the head of which the new Earley item is added.
The resource used by \call{Add EIM}{}
is always caller-included.

\subsection{Per-set lists}
\label{s:per-set-lists}

In the general case,
where \var{x} is an arbitrary datum,
it is not possible 
to use duple $[\Ves{i}, x]$
as a search key and expect the search to use
\Oc{} time.
Within \Marpa, however, there are specific cases
where it is desirable to do exactly that.
This is accomplished by
taking advantage of special properties of the search.

If it can be arranged that there is
a link direct to the Earley set \Ves{i},
and that $0 \leq \var{x} < \var{c}$,
where \var{c} is a constant of reasonable size,
then a search can be made in \Oc{} time,
using a data structure called a PSL.
Data structures identical to or very similar to PSL's are
briefly outlined in both
\cite[p. 97]{Earley1970} and
\cite[Vol. 1, pages 326-327]{AU1972}.
But neither source gives them a name.
The term PSL
(``per-Earley set list'')
is new
with this \doc{}.

A PSL is a fixed-length array of
integers, indexed by an integer,
and kept as part of each Earley set.
While \Marpa{} is building a new Earley set,
\Ves{j},
the PSL for every previous Earley set, \Vloc{i},
tracks the Earley items in \Ves{j} that have \Vloc{i}
as their origin.
The maximum number of Earley items that must be tracked
in each PSL is
the number of dotted rules,
\Vsize{\Cdr},
which is a constant of reasonable size
that depends on \Cg{}.

It would take more than \Oc{} time
to clear and rebuild the PSL's each time
that a new Earley set is started.
This overhead is avoided by ``time-stamping'' each PSL
entry with the Earley set
that was current when that PSL
entry was last updated.

As before,
where \Ves{i} is an Earley set,
let \Vloc{i} be its location,
and vice versa.
\Vloc{i} is an integer which is
assigned as Earley sets are created.
Let $\ID{\Vdr{x}}$ be an integer
uniquely identifying a dotted rule.
Numbering the dotted rules from 0 on up as rules are added to
the grammar 
is an easy way to create a practical choice of $\ID{\Vdr{x}}$.
Let $\PSL{\Ves{x}}{\var{y}}$
be the entry for integer \var{y} in the PSL in
the Earley set at \Vloc{x}.

Consider the case where Marpa is building \Ves{j}
and wants to check whether Earley item \Veim{x} is new,
where $\Veim{x} = [ \Vdr{x}, \Vorig{x} ]$.
To check if \Veim{x} is new,
Marpa checks
\begin{equation*}
\var{time-stamp} = \PSL{\Ves{x}}{\ID{\Vdr{x}}}
\end{equation*}
If the entry has never been used,
we assume that $\var{time-stamp} = \Lambda$.
If $\var{time-stamp} \ne \Lambda \land \var{time-stamp} = \Vloc{j}$,
then \Veim{x} is not new,
and will not be added to the Earley set.

If $\Vloc{p} = \Lambda \lor \var{time-stamp} \ne \Vloc{j}$,
then \Veim{x} is new.
\Veim{x} is added to the Earley set,
and a new time-stamp is set, as follow:
\begin{equation*}
\PSL{\Ves{x}}{\ID{\Vdr{x}}} \gets \Vloc{j}.
\end{equation*}

\subsection{Complexity summary}

For convenience, we collect and summarize here
some of the observations of this section.

\begin{observation}
The time and space charged to an Earley item
which is actually added to the Earley sets
is \Oc{}.
\end{observation}

\begin{observation}
The time charged to an attempt
to add a duplicate Earley item to the Earley sets
is \Oc{}.
\end{observation}

For evaluation purposes, \Marpa{} adds a link to
each EIM that records each attempt to
add that EIM,
whether originally or as a duplicate.
Traditionally, complexity results treat parsers
as recognizers, and such costs are ignored.
This will be an issue when the space complexity
for unambiguous grammars is considered.

\begin{observation}
The space charged to an attempt
to add a duplicate Earley item to the Earley sets
is \Oc{} if links are included,
zero otherwise.
\end{observation}

As noted in Section \ref{p:add-eim},
the time and space used by predicted Earley items
and attempts to add them is charged elsewhere.

\begin{observation}
No space or time is charged to predicted Earley items,
or to attempts to add predicted Earley items.
\end{observation}

\section{Marpa is correct}
\label{s:correct}

\subsection{Nulling symbols}
\label{s:nulling}

Recall that Marpa grammars,
without loss of generality,
contain neither empty rules or
properly nullable symbols.
This corresponds directly
to a grammar rewrite in the \Marpa{} implementation,
and its reversal during \Marpa's evaluation phase.
For the correctness and complexity proofs in this \doc{},
we assume an additional rewrite,
this time to eliminate nulling symbols.

Elimination of nulling symbols is also
without loss of generality, as can be seen
if we assume that a history
of the rewrite is kept,
and that the rewrite is reversed
after the parse.
Clearly, whether a grammar \Cg{} accepts
an input \Cw{}
will not depend on the nulling symbols in its rules.

\subsection{Marpa's Earley sets grow at worst linearly}

\begin{theorem}\label{t:es-count}
For a context-free grammar,
and a parse location \Vloc{i},
\begin{equation*}
\textup{
    $\bigsize{\EVtable{\Marpa}{i}} = \order{\var{i}}$.
}
\end{equation*}
\end{theorem}

\begin{proof}
EIM's have the form $[\Vdr{x}, \Vorig{x}]$.
\Vorig{x} is the origin of the EIM,
which in Marpa cannot be after the current
Earley set  at \Vloc{i},
so that
\begin{equation*}
0 \le \Vorig{x} \le \Vloc{i}.
\end{equation*}
The possibilities for \Vdr{x} are finite,
since the number of dotted rules is a constant,
$\size{\Cdr}$,
which depends on \Cg{}.
Since duplicate EIM's are never added to an Earley set,
the maximum size of Earley set \Vloc{i} is therefore
\begin{equation*}
\Vloc{i} \times \size{\Cdr} = \order{\Vloc{i}}.\qedhere
\end{equation*}
\end{proof}

\subsection{Marpa's Earley sets are correct}

\begin{theorem}\label{t:table-correct}
Marpa's Earley sets are correct.
\end{theorem}

Proof omitted.\qedsymbol

\subsection{Marpa is correct}

We are now is a position to show that Marpa is correct.
\begin{theorem}
\textup{ $\myL{\Marpa,\Cg} = \myL{\Cg}$ }
\end{theorem}

\begin{proof}
From Theorem \ref{t:table-correct},
we know that
\begin{equation*}
[\Vdr{accept},0] \in \EVtable{\Leo}{\Vsize{w}}
\end{equation*}
if and only there is a
\begin{equation*}
[\Vdr{accept},0] \in \EVtable{\Marpa}{\Vsize{w}}
\end{equation*}
such that $\Vdr{accept} \in \Vdr{accept}$.
From the acceptance criteria in the \Leo{} definitions
and the \Marpa{} pseudocode,
it follows that
\begin{equation*}
\myL{\Marpa,\Cg} = \myL{\Leo,\Cg}.
\end{equation*}
By Theorem 4.1 in \cite{Leo1991}, we know that
\begin{equation*}
\myL{\Leo,\Cg} = \myL{\Cg}.
\end{equation*}
The theorem follows from
the previous two equalities.
\end{proof}

\section{Marpa recognizer complexity}
\label{s:complexity}

\subsection{Preliminaries}

In the following we extend the notation for sentential forms to
allow location to be indicate.
Specifically, to indicate in the sentential form
\begin{equation*}
    \Vsf{a} \cat \Vsf{b} \mydot \Vsf{c}
\end{equation*}
that \Vloc{x} is between \Vsf{a} and \Vsf{b},
and that the dot is at location \var{y},
we will write
\begin{equation*}
    \Vsf{a} \; [\var{x}] \; \Vsf{b} \; [\var{y}] \; \Vsf{c}.
\end{equation*}
We will also sometimes indicate the dot location
more explicitly
\begin{equation*}
    \Vsf{a} \; [\var{x}] \; \Vsf{b} \; [\var{dot}] \; \Vsf{c}.
\end{equation*}

Intuitively,
a \dfn{finite derivation grammar} is an unambiguous grammar
which can be parsed by considering, at any location
in the input, at most some finite number
of rightmost derivations.

\begin{definition}
\var{g} is
a \dfn{finite derivation grammar} if \var{g}
is an unambiguous grammar,
and if,
for any input string \CVwstr{0,\var{i}},
there is a finite set of rightmost derivations, \var{rm-deriv},
one of which must be the prefix of the rightmost derivation
of any successful parse.
\end{definition}

\begin{theorem}
\label{t:prediction-On}
Let \var{g} be a finite derivation grammar.
The number of prediction EIM's for it in the Earley set \var{cut},
is at most some constant \var{c},
where \var{c} is a finite constant,
which may be a function of the grammar.
\end{theorem}

\begin{proof}
Let \var{c} be the number of rules in \var{g}.
All predictions EIM's are dotted rules with the dot before the first symbol,
and have their origin in the current set.
Therefore the number of predictions in an Earley set is at most \var{c}.
\end{proof}

\begin{theorem}
\label{t:medial-On}
Let \var{g} be a finite derivation grammar.
The number of medial EIM's for it in the Earley set \var{cut},
is at most some constant \var{c},
where \var{c} is a finite constant,
which may be a function of the grammar.
\end{theorem}

\begin{proof}
A medial EIM must take the form
\begin{equation*}
 \Veim{medial} = [ \Vdr{medial}, \Vloc{medial-origin} ]
\end{equation*}
where
\begin{equation*}
 \Vdr{medial} = [\Vsym{A} \de \Vsf{pre-dot} \mydot \Vsym{post-dot} ].
\end{equation*}

We claim that that number of medial dotted rules
\begin{equation}
    \label{e:finite-medial-claim} \var{c} \le \size{\var{dotted-rules}}
\end{equation}
where \size{\var{dotted-rules}} is the cardinality
of the set of dotted rules in \var{g}.
To show \eqref{e:finite-medial-claim},
we assume, for a reductio, that there are
more medial Earley items at \var{cut} then there are
medial dotted rules.
This means that at least two of the medial Earley items,
call them \Veim{eim1} and \Veim{eim2} must share the
same dotted rule, call it \Vdr{shared}.
We can write these two Earley items
\begin{gather}
 \label{e:medial-eim1} \Veim{eim1} = [ \Vdr{shared}, \Vloc{origin1} ] \\
 \label{e:medial-eim2} \text{and} \quad \Veim{eim2} = [ \Vdr{shared}, \Vloc{origin2} ] \\
 \text{where} \quad \Vdr{shared} = [ \Vsym{A} \de \Vsf{pre-dot} \mydot \Vsf{post-dot} ]
\end{gather}
Since by the assumption for the reduction,
\Veim{eim1} and \Veim{eim2} differ, we have
$\Vloc{origin1} \neq \Vloc{origin2}$.

If $\Vloc{origin1} \neq \Vloc{origin2}$
within a single right derivation,
the rule must recurse:
\begin{equation}
    \label{e:finite-medial-claim2} \Vsym{A} \destar
    \Vsf{pre-A} \cat \Vsym{A} \cat \Vsf{post-A} \mydot \Vsf{post-dot}.
\end{equation}
But this is not possible at the same dot location, as we will show
next.

To show that \eqref{e:finite-medial-claim2}
is not possible,
assume that the one of the two Earley items \eqref{e:medial-eim1}
and \eqref{e:medial-eim2} derives the other.
Without loss of generality, we describe
the recursion as $\Vsf{pre-dot} \destar \Vsf{pre-A} \cat \Vsym{A} \cat \Vsf{post-dot}$,
where \Vsf{pre-A} and \Vsf{post-A} can derive the null string.
As a reminder, internal Marpa rules
never derive the null string and,
by the definition of medial rule, neither can the pre- and post-dot
portions of that medial rule.

If we follow the recursion through a double derivation
\begin{align}
\notag \Vsym{A} \de &  \Vsf{pre-dot} \mydot \Vsf{post-dot} \\
\notag
  \destar & \Vsf{pre-A} \cat \Vsym{A} \cat \Vsf{post-A} \mydot \var{post-dot} \\
\label{e:finite-medial-step}
\destar &
  \var{pre-A} \cat \var{pre-dot} \mydot \var{post-dot} \cat \var{post-A} \mydot \var{post-dot},
\end{align}
We see that in derivation step
\eqref{e:finite-medial-step}
the dot is required to be both before and after the
sentential form $\Vsf{post-dot} \cat \Vsf{post-A}$.
This is not possible, because \Vsf{post-dot} cannot derive the null string.
This completes the reductio, and allows us to conclude that
\eqref{e:finite-medial-claim2} is not possible.

Since medial Earley items cannot recurse at the same Earley set,
it is not possible for
two Earley items, corresponding to a single rightmost derivation,
and with the same medial dotted rule,
to appear in the same Earley set.
This means that there can be,
in each Earley set,
at most one medial Earley item for
each dotted rule and rightmost derivation.

\end{proof}

\begin{theorem}
\label{t:fusion-On}
Let \var{g} be a finite derivation grammar.
The number of completed EIM's for it in the Earley set \var{cut},
excluding right recursions,
is at most some constant \var{c},
where \var{c} is a finite constant,
which may be a function of the grammar.
\end{theorem}

\begin{proof}
Let 
\begin{equation*}
\var{c} = \size{\var{rules}} \times \size{\var{rm-derivations}},
\end{equation*}
where $\size{\var{rules}}$ is the number of rules in grammar \var{g}.
We claim that, excluding right recursions,
the number of completed items at Earley set \var{cut}
cannot exceed \var{c}.

We proceed by reductio.
Assume that in fact there are $\var{c} + 1$ non-right-recursive completion EIM's
in Earley set \var{cut}.
Since there are only \var{c} pairings of rule and rightmost derivation,
at least two of these must share the same rule and be part of the same rightmost
derivation.
Since all completion dotted rules have the dot after the last symbol of the rule,
completions which share a rule also share a dotted rule.

But, by the definition of right recursion for Earley items,
if two distinct completed Earley items have the same rule
are in the same Earley set,
and are part of the same rightmost derivation,
they are right recursive.
But we assumed for the reductio that none of Earley items was
a right recursion, so this is a contradiction.
This contradiction shows the reductio and the theorem.
\end{proof}

\begin{theorem}
Let \var{g} be a finite derivation grammar.
The number of EIM's for it in the Earley set \var{cut},
excluding right recursions,
is at most some constant \var{c},
where \var{c} is a finite constant,
which may be a function of the grammar.
\end{theorem}

\begin{proof}
Every EIM is either a prediction, medial
or a completion.
Theorem \ref{t:prediction-On} shows that the
number of predictions in Earley set \var{cut}
is less than or equal to a constant,
call it \var{max-prediction}.
Theorem \ref{t:medial-On} shows that the
number of medial EIM's in Earley set \var{cut}
is less than or equal to a constant,
call it \var{max-medial}.
Theorem \ref{t:fusion-On} shows that the
number of completed EIM's in Earley set \var{cut},
excluding right recursions,
is less than or equal to a constant,
call it \var{max-completed}.
Predictions and medials EIMs cannot be right recursions.
If we let
\begin{equation}
  \var{c} = \var{max-prediction} + \var{max-medial} + \var{max-completed},
\end{equation}
then \var{c} is greater than or equal to the number of EIM's
in Earley set \var{cut}.
\end{proof}

\begin{theorem}
\label{t:leo-lemma}
Let \var{g} be an $LR(\pi)$
grammar, where $\pi$ is a left congruence.
Let, for all
\Vsf{prefix1}, \Vsf{prefix2},
\Vstr{seen}, \Vstr{unseen1}, \Vstr{unseen2}
\begin{gather}
\label{e:leo-lemma-assumption-1}
\begin{split}
   \Vsym{S} & \deRstar \Vsf{prefix1} \cat \Vstr{unseen1} \\
        & \deRstar \Vstr{seen} \cat \Vstr{unseen1},
\end{split} \\
\label{e:leo-lemma-assumption-2}
\begin{split}
   \Vsym{S} & \deRstar \Vsf{prefix2} \cat \Vstr{unseen2} \\
   & \deRstar \Vstr{seen} \cat \Vstr{unseen2} \quad \text{and}
\end{split} \\
\label{e:leo-lemma-assumption-3}
   \var{unseen1} \equiv
   \var{unseen2} \pmod \pi.
\end{gather}
Then, either
\begin{gather}
\label{e:leo-lemma-conclusion-1}
\var{prefix1} \deRstar \var{prefix2} \quad \text{or} \\
\label{e:leo-lemma-conclusion-2}
\var{prefix2} \deRstar \var{prefix1}.
\end{gather}
$\blacklozenge$
\end{theorem}

Joop Leo proved this using a reduction in an unpublished addendum to \cite{Leo1991}.
The following is a proof by induction.
\begin{proof}
We number the direct steps of each right derivation,
from last to first, so
that
\begin{equation}
\label{leo-lemma-step-1-0}
  \Vstr{seen} \diamond \Vstr{unseen1}
\end{equation}
is step 0 of the derivation for \Vsf{prefix1}.

In the following, we will be comparing steps, but we will only be interested in the
part of the sentential forms before \Vstr{unseen1} and \Vstr{unseen2}.
We call this point in the input the ``threshold''.
For convenience will will mark it with a diamond.

Without loss of generality, we assume that
the derivation for \Vsf{prefix2} is longer than that of \Vsf{prefix1},
so that what we want to show is
\begin{align}
\label{leo-lemma-step-2-S}   \Vsym{S} & \deRstar \Vsf{prefix2} \diamond \Vstr{unseen2} \\
\label{leo-lemma-step-2-n}     & \deRstar \Vsf{prefix1} \diamond \Vstr{unseen2} \\
\label{leo-lemma-step-2-0}   & \deRstar \Vstr{seen} \diamond \Vstr{unseen2},
\end{align}
which we do by induction.

As the basis of the induction, we compare
the pre-threshold portion of 
Step \eqref{leo-lemma-step-1-0} with 
\eqref{leo-lemma-step-2-0},
and note they are identical.
To show the step of the induction, assume
that the pre-threshold portions of step \var{n}
in derivation \label{e:leo-lemma-assumption-1}
is identical
to the pre-threshold portions of step \var{n}
in derivation \label{e:leo-lemma-assumption-2}.
Without loss of generality, we show the direct derivation
from step $\var{n}+1$ to step \var{n}
for the two derivations as
as
\begin{multline}
\Vsf{before1} \cat \Vsym{lhs1} \cat \Vstr{after1} \diamond \Vstr{unseen1} \\
\deR \Vsf{before1} \cat \Vsf{rhs1} \cat \Vstr{after1} \diamond \Vstr{unseen1}
\end{multline}
and
\begin{multline}
\Vsf{before2} \cat \Vsym{lhs2} \cat \Vstr{after2} \diamond \Vstr{unseen2} \\
\deR \Vsf{before2} \cat \Vsf{rhs2} \cat \Vstr{after2} \diamond \Vstr{unseen2}
\end{multline}
where from the assumption for the step we know that
\begin{multline}
\label{e:leo-lemma-induction_step-assumption}
\Vsf{before1} \cat \Vsf{rhs1} \; [\var{end1}] \; \Vstr{after1} \\
= \Vsf{before2} \cat \Vsf{rhs2} \; [\var{end2}] \; \Vstr{after2}.
\end{multline}
In \label{e:leo-lemma-induction_step-assumption}
\Vloc{end1} and \Vloc{end2} indicate where the ends of the next handle
must be found in their respective derivation.

This is a LR grammar, so we can find their handle by scanning terminals from the
right.
The two pre-threshold sentential forms are identical, so the scanned terminals will be
identical.  Call the string Vstr{after}.
By left congruence, we have
\begin{equation}
   \Vstr{after} .\var{unseen1} \equiv
   \Vstr{after} .\var{unseen2} \pmod \pi,
\end{equation}
so that both strings are in the same cell of the partition, $\pi$.
By the LR-property, this means that both handles will be
found at the same location,
that is, that $\Vloc{end1} = \Vloc{end2}$,
which in turn means that
\begin{equation}
\label{e:leo-lemma-after-eq} \Vstr{after1} = \Vstr{after2}.
\end{equation}
By the LR-property, we also know that the production
of the two handles will be identical, so that
that is, that
\begin{gather}
\label{e:leo-lemma-lhs-eq} \Vsym{lhs1} = \Vsym{lhs2} \quad \text{and} \\
\label{e:leo-lemma-rhs-eq} \Vsf{rhs1} = \Vsf{rhs2}.
\end{gather}
and 
This in turn means that
\begin{equation}
\label{e:leo-lemma-before-eq} 
\Vsf{before1} = \Vsf{before2}.
\end{equation}
From 
\ref{e:leo-lemma-before-eq},
\ref{e:leo-lemma-lhs-eq}
and \ref{e:leo-lemma-after-eq},
we can show that
\begin{equation}
\Vsf{before1} \cat \Vsym{lhs1} \cat \Vstr{after1} =
\Vsf{before1} \cat \Vsym{lhs1} \cat \Vstr{after1},
\end{equation}
which show the step of the induction,
and the induction.

Let the number of steps in 
derivation \label{e:leo-lemma-assumption-1}
be \var{l1}.
From the induction, 
and in particular
that
\begin{equation}
\label{e:leo-induction-result}
\text{step \var{l1}
of derivation \ref{e:leo-lemma-assumption-2} is }
\Vsf{prefix1} \cat \Vstr{unseen2}.
\end{equation}
Recall that we assumed without loss of generality that
derivation \ref{e:leo-lemma-assumption-2} was the longer of the two
so that step
\ref{leo-lemma-step-2-S}
is an earlier (higher-numbered) step.
From this and \ref{e:leo-induction-result},
we have that
\begin{equation*}
\Vsf{prefix2} \diamond \Vstr{unseen2} \deRstar
\Vsf{prefix1} \diamond \Vstr{unseen2}
\end{equation*}
and therefore
\begin{equation*}
\Vsf{prefix2} \deRstar \Vsf{prefix1}.
\end{equation*}

\end{proof}

\begin{theorem}
Let \var{g} be $LR(\pi)$, with $\pi$
a partition of cardinality $\size{\pi}$.
If $\size{\pi}$ is finite, there are,
for all \var{i}
and all \Cwrange{0}{\var{i}-1},
at most
$\size{\pi}$
derivations up to \var{i}.
\end{theorem}

\begin{proof}
Consider two inputs, \CVrange{w1}{0}{\var{n1}-1}
and \CVrange{w2}{0}{\var{n2}-1}.
of length \var{n1} and \var{n2}.
Let
\begin{gather*}
  \Vstr{after1} = \CVrange{w1}{\var{i}}{\var{n1}-1} \quad \text{and} \\
  \Vstr{after2} = \CVrange{w2}{\var{i}}{\var{n2}-1}.
\end{gather*}

Assume, for the purpose of a reduction,
that there are $\size{\pi}+1$ derivations.
In that case there must be at least two distinct derivations
of where
\begin{equation}
   \Vstr{after1} \equiv \Vstr{after2} \pmod \pi.
\end{equation}
Let their first rightmost derivation steps up to \var{i} be
\begin{gather}
\label{leo-lemma-eq1}  \Vsf{before1} \diamond \Vstr{after2} \quad \text{and} \\
\label{leo-lemma-eq2}  \Vsf{before2} \diamond \Vstr{after2}.
\end{gather}
Since, the two derivations are distinct,
\begin{gather}
\label{leo-lemma-eq3} \Vsf{before1} \neq \Vsf{before2}.
\end{gather}

From Theorem \ref{t:leo-lemma}, we know that either
$\Vsf{before1} \derives \Vsf{before2}$ or
$\Vsf{before2} \derives \Vsf{before1}$.
Without loss of generality, we assume that
\begin{equation}
\label{leo-lemma-eq4}
\Vsf{before1} \derives \Vsf{before2}.
\end{equation}
\eqref{leo-lemma-eq4} can only be the case
if there is some value of \Vstr{after1}, such
that $\Vstr{after1} = \Vstr{after2}$.
Further, 
\eqref{leo-lemma-eq1} and
\eqref{leo-lemma-eq2} are, by assumption,
both first rightmost derivation steps up to \var{i}.
This is only possible if
\begin{equation}
\label{leo-lemma-eq5}
\Vsf{before1} = \Vsf{before2}.
\end{equation}

But
\eqref{leo-lemma-eq5}
that contradicts
\eqref{leo-lemma-eq3}.
The contradiction shows the reductio,
which in turn
show that the number of derivations is at
most $\size{\pi}+1$.
\end{proof}

\begin{definition}
\label{d:grammar-union}
Let \var{g1} and \var{g2} be two grammars.
Rewrite each so that they do not share LHS symbols,
calling the rewritten grammars,
\begin{gather*}
\var{g1'} = [ \var{V1'}, \var{N1'}, \var{rule1'}, \var{S1'}] \quad \text{and} \\
\var{g2'} = [ \var{V2'}, \var{N2'}, \var{rule2'}, \var{S2'}].
\end{gather*}
Let \Vsym{S} be a non-terminal which is new,
that is, $\var{S} \notin \var{V1'} \cup \var{V2'}$.
Let \var{rules} be 
\begin{equation*}
\bigset{
[\Vsym{S} \de \var{S1'}],
[\Vsym{S} \de \var{S2'}]}
\cup \var{rule1'} \cup \var{rule2'}
\end{equation*}
Let \var{V} be $\var{V1'} \cup \var{V2'}$ and
let \var{N} be $\var{N1'} \cup \var{N2'}$.
Then \var{g}, the \dfn{union} of \var{g1} and \var{g2} is
\begin{equation}
\var{g} = [\var{V}, \var{N}, \var{rules}, \var{S}].
\end{equation}
The \dfn{union} of a set of grammars is the closure of 
the union of pairs from the set.
$\blacklozenge$
\end{definition}

\begin{theorem}
A union of a \var{n} finite tree prefix grammars is a
finite tree prefix grammar,
if \var{n} is  finite.
$\blacklozenge$
\end{theorem}

\begin{proof}
Let \var{g1} and \var{g2} be two finite prefix grammars,
with their respective sets of finite tree prefixes being
\var{prefixes1} and
\var{prefixes2}.
We consider their union \var{g} as defined at \ref{d:grammar-union}.

Let \var{g1'} be \var{g1} with its non-terminals rewritten as was done
in creating \var{g}.
We apply the same rewrite of non-terminals to
\var{prefixes1}, calling the \var{result1'}.
We do the same for \var{g2} and \var{prefixes2},
to create 
\var{g2'} and \var{prefixes2'}, respectively.

Let \Vsym{S1'} be the root symbol of \var{g1'},
\Vsym{S2'} be the root symbol of \var{g2'},
and \Vsym{S} be the root symbol of their union in \var{g}.
Define the set of tree prefixes \var{prefixes1''} to be
\begin{equation}
\left\lbrace
\ruleMarker{[\var{S} \de var{S1'}]} \cat \var{tp}
\middle|
\var{tp} \in \var{prefixes1'}
\right\rbrace
\end{equation}
Create \var{prefixes2''} in the same way,
using \var{g2'} and \var{prefixes1'}.

It can then be seen that
\begin{equation}
\var{prefixes''} = \var{prefixes1''} \cup \var{prefixes2''}
\end{equation}
is a full set of tree prefixes for \var{g} up to \var{i}.
Since it is the union of two finite sets,
\var{prefixes''} is finite.

We have shown how to create a finite set of tree prefixes
for the union of FTP grammars for the case $\var{n} = 2$.
The result for finite \var{n} follows by taking the closure
of this procedure.
\end{proof}

\subsection{Complexity of each Earley item}

For the complexity proofs,
we consider only Marpa grammars without nulling
symbols.
We showed that this rewrite
is without loss of generality
in Section \ref{s:nulling},
when we examined correctness.
For complexity we must also show that
the rewrite and its reversal can be done
in amortized \Oc{} time and space
per Earley item.

\begin{lemma}\label{l:nulling-rewrite}
All time and space required
to rewrite the grammar to eliminate nulling
symbols, and to restore those rules afterwards
in the Earley sets,
can be allocated
to the Earley items
in such a way that each Earley item
requires \Oc{} time and space.
\end{lemma}

\begin{proof}
The time and space used in the rewrite is a constant
that depends on the grammar,
and is charged to the parse.
The reversal of the rewrite can be
done in a loop over the Earley items,
which will have time and space costs
per Earley item,
plus a fixed overhead.
The fixed overhead is \Oc{}
and is charged to the parse.
The time and space per Earley item
is \Oc{}
because the number of
rules into which another rule must be rewritten,
and therefore the number of Earley items
into which another Earley item must be rewritten,
is a constant that depends
on the grammar.
\end{proof}

\begin{theorem}\label{t:O1-time-per-eim}
All time in \Marpa{} can be allocated
to the Earley items,
in such a way that each Earley item,
and each attempt to
add a duplicate Earley item,
requires \Oc{} time.
\end{theorem}

\begin{theorem}\label{t:O1-space-per-eim}
All space in \Marpa{} can be allocated
to the Earley items,
in such a way that each Earley item
requires \Oc{} space and,
if links are not considered,
each attempt to add a duplicate
Earley item adds no additional space.
\end{theorem}

\begin{theorem}\label{t:O1-links-per-eim}
If links are considered,
all space in \Marpa{} can be allocated
to the Earley items
in such a way that each Earley item
and each attempt to
add a duplicate Earley item
requires \Oc{} space.
\end{theorem}

\begin{proof}[Proof of Theorems
\ref{t:O1-time-per-eim},
\ref{t:O1-space-per-eim},
and \ref{t:O1-links-per-eim}]
These theorems follows from the observations
in Section \ref{s:pseudocode}
and from Lemma \ref{l:nulling-rewrite}.
\end{proof}

\subsection{Duplicate dotted rules}

The same complexity results apply to \Marpa{} as to \Leo,
and the proofs are very similar.
\Leo's complexity results\cite{Leo1991}
are based on charging
resource to Earley items,
as were the results
in Earley's paper\cite{Earley1970}.

Earley\cite{Earley1970} shows that,
for unambiguous grammars,
every attempt to add
an Earley item will actually add one.
In other words, there will be no attempts to
add duplicate Earley items.
Earley's proof shows that for each attempt
to add a duplicate,
the causation must be different --
that the EIM's causing the attempt
differ in either their dotted
rules or their origin.
Multiple causations for an Earley item
would mean multiple derivations
for the sentential form that it represents.
That in turn would mean that
the grammar is ambiguous,
contrary to assumption.

\begin{theorem}\label{t:tries-O-eims}
For an unambiguous grammar,
the number of attempts to add
Earley items will be less than or equal to
\begin{equation*}
\textup{
    $\var{c} \times \Rtablesize{\Marpa}$,
}
\end{equation*}
where \var{c} is a constant
that depends on the grammar.
\end{theorem}

\begin{proof}
Let \var{initial-tries} be the number of attempts to add the initial item to
the Earley sets.
For Earley set 0, it is clear from the pseudocode
that there will be no attempts to add duplicate EIM's:
\begin{equation*}
\var{initial-tries} = \bigsize{\Vtable{0}}
\end{equation*}

Let \var{leo-tries} be the number of attempted Leo fusions in
Earley set \Vloc{j}.
For Leo fusion,
we note that by its definition,
duplicate attempts at Leo fusion cannot occur.
From the pseudo-code of Sections \ref{p:fuse-one-lhs}
and \ref{p:leo-op},
we know there will be at most one Leo fusion for
each EIM in the current Earley set,
\Vloc{j}.
\begin{equation*}
\var{leo-tries} \le \bigsize{\Vtable{j}}
\end{equation*}

Let \var{scan-tries} be the number of attempted scan operations in
Earley set \Vloc{j}.
Marpa attempts a scan operation,
in the worst case,
once for every EIM in the Earley set
at $\Vloc{j} \subtract 1$.
Therefore, the number of attempts
to add scans
must be less than equal to \bigsize{\Etable{\var{j} \subtract 1}},
the number
of actual Earley items at
$\Vloc{j} \subtract 1$.
\begin{equation*}
\var{scan-tries} \le \bigsize{\Etable{\var{j} \subtract 1}}
\end{equation*}

Let \var{predict-tries} be the number of attempted predictions in
Earley set \Vloc{j}.
\Marpa{} includes prediction
in its scan and fusion operations,
and the number of attempts to add duplicate predicted EIM's
must be less than or equal
to the number of attempts
to add duplicate confirmed EIM's
in the scan and fusion operations.
\begin{equation*}
\var{predict-tries} \le \var{fusion-tries} + \var{scan-tries}
\end{equation*}

The final and most complicated case is Earley fusion.
Recall that \Ves{j} is the current Earley set.
Consider the number of fusions attempted.
\Marpa{} attempts to add an Earley fusion result
once for every triple
\begin{equation*}
[\Veim{predecessor}, \Vsym{transition}, \Veim{component}].
\end{equation*}
where
\begin{equation*}
\begin{split}
& \Veim{component} = [ \Vdr{component}, \Vloc{component-origin} ]  \\
\land \quad & \Vdr{component} \in \Vdr{component} \\
 \land \quad & \Vsym{transition} = \LHS{\Vdr{component}}. \\
\end{split}
\end{equation*}

We now put an upper bound on number of possible values of this triple.
The number of possibilities for \Vsym{transition} is clearly at most
\size{\var{symbols}},
the number of symbols in \Cg{}.
We have $\Veim{component} \in \Ves{j}$,
and therefore there are at most 
$\bigsize{\Ves{j}}$ choices for \Veim{component}.

\begin{sloppypar}
We can show that the number of possible choices of 
\Veim{predecessor} is at most
the number of dotted rules, \Vsize{dr}, by a reductio.
Suppose, for the reduction,
there were more than \Vsize{dr} possible choices of \Veim{predecessor}.
Then there are two possible choices of \Veim{predecessor} with
the same dotted rule.
Call these \Veim{choice1} and \Veim{choice2}.
We know, by the definition of Earley fusion, that
$\Veim{predecessor} \in \Ves{j}$,
and therefore we have
$\Veim{choice1} \in \Ves{j}$ and
$\Veim{choice2} \in \Ves{j}$.
Since all EIM's in an Earley set must differ,
and
\Veim{choice1} and \Veim{choice2} both have the same
dotted rule,
they must differ in their origin.
But two different origins would produce two different derivations for the
fusion, which would mean that the parse was ambiguous.
This is contrary to the assumption for the theorem
that the grammar is unambiguous.
This shows the reductio
and that the number of choices for \Veim{predecessor},
compatible with \Vorig{component}, is as most \Vsize{dr}.
\end{sloppypar}

\begin{sloppypar}
Collecting the results we see that the possibilities for 
each \Veim{component} are
\begin{equation*}
\begin{alignedat}{2}
& \Vsize{dr} &&
\qquad \text{choices of \Veim{predecessor}} \\
\times \; & \Vsize{symbols} &&
\qquad \text{choices of \Vsym{transition}} \\
\times \; & \size{\Ves{j}} &&
\qquad \text{choices of \Veim{component}} \\
\end{alignedat}
\end{equation*}
\end{sloppypar}

The number of fusion attempts will therefore be at most
\begin{equation*}
\var{fusion-tries} \leq \Vsize{dr} \times \Vsize{symbols} \times \bigsize{\Ves{j}}.
\end{equation*}

Summing
\begin{multline*}
\var{tries} =
\var{scan-tries} +
\var{leo-tries} + \\
\var{predict-tries} +
\var{fusion-tries} +
\var{initial-tries},
\end{multline*}
we have,
where $\var{n} = \Vsize{\Cw}$,
the size of the input,
\begin{equation*}
\begin{alignedat}{2}
& \bigsize{\Vtable{0}} & \quad &
\qquad \text{initial EIM's} \\
+ \; & \sum\limits_{i=0}^{n}{
\bigsize{\Vtable{j}}
} &&
\qquad \text{LIM's} \\
+ \; & 2 \times \sum\limits_{i=1}^{n}{
\bigsize{\Etable{\var{j} \subtract 1}}
} &&
\qquad \text{scanned EIM's} \\
+ \; & 2 \times \sum\limits_{i=0}^{n}{\Vsize{dr} \times \Vsize{symbols} \times \bigsize{\Ves{j}}} &&
\qquad \text{fusion EIM's}.
\end{alignedat}
\end{equation*}
In this summation,
\var{prediction-tries} was accounted for by counting the scanned and predicted
EIM attempts twice.
Since \Vsize{dr} and \Vsize{symbols} are both constants
that depend only on \Cg{},
if we collect the terms of the summation,
we will find a constant \var{c}
such that
\begin{equation*}
\var{tries} \leq \var{c} \times \sum\limits_{i=0}^{n}{\bigsize{\Vtable{j}}},
\end{equation*}
and
\begin{equation*}
\var{tries} \leq \var{c} \times \Rtablesize{\Marpa},
\end{equation*}
where \var{c} is a constant that depends on \Cg{}.\qedhere
\end{proof}

As a reminder,
we follow tradition by
stating complexity results in terms of \var{n},
setting $\var{n} = \Vsize{\Cw}$,
the length of the input.

\begin{theorem}\label{t:eim-count}
For a context-free grammar,
\begin{equation*}
\textup{
    $\Rtablesize{\Marpa} = \order{\var{n}^2}$.
}
\end{equation*}
\end{theorem}

\begin{proof}
By Theorem \ref{t:es-count},
the size of the Earley set at \Vloc{i}
is $\order{\var{i}}$.
Summing over the length of the input,
$\Vsize{\Cw} = \var{n}$,
the number of EIM's in all of \Marpa's Earley sets
is
\begin{equation*}
\sum\limits_{\Vloc{i}=0}^{\var{n}}{\order{\var{i}}}
= \order{\var{n}^2}.\qedhere
\end{equation*}
\end{proof}

\begin{theorem}\label{t:ambiguous-tries}
For a context-free grammar,
the number of attempts to add
Earley items is $\order{\var{n}^3}$.
\end{theorem}

\begin{proof}
Reexamining the proof of Theorem \ref{t:tries-O-eims},
we see that the only bound that required
the assumption that \Cg{} was unambiguous
was \var{fusion-tries},
the count of the number of attempts to
add Earley fusions.
Let \var{other-tries}
be attempts to add EIM's other than
as the result of Earley fusions.
By Theorem \ref{t:eim-count},
\begin{equation*}
\Rtablesize{\Marpa} = \order{\var{n}^2},
\end{equation*}
and by Theorem \ref{t:tries-O-eims},
\begin{equation*}
\var{other-tries} \le \var{c} \times \Rtablesize{\Marpa},
\end{equation*}
so that
$\var{other-tries} = \order{\var{n}^2}$.

\begin{sloppypar}
Looking again at \var{fusion-tries}
for the case of ambiguous grammars,
we need to look again at the triple
\begin{equation*}
[\Veim{predecessor}, \Vsym{transition}, \Veim{component}].
\end{equation*}
We did not use the fact that the grammar was unambigous in counting
the possibilities for \Vsym{transition} or \Veim{component}, but
we did make use of it in determining the count of possibilities
for \Veim{predecessor}.
We know still know that
\begin{equation*}
\Veim{predecessor} \in \Ves{component-origin},
\end{equation*}
where 
\Vloc{component-origin} is the origin of \Veim{component}.
Worst case, every EIM in \Ves{component-origin} is a possible
match, so that
the number of possibilities for \Veim{predecessor} now grows to
\size{\Ves{component-origin}}, and
\begin{equation*}
\var{fusion-tries} =
\bigsize{\Ves{component-origin}} \times \Vsize{symbols} \times \bigsize{\Ves{j}}.
\end{equation*}
\end{sloppypar}

In the worst case $\var{component-origin} \simeq \var{j}$,
so that by Theorem \ref{t:es-count},
\begin{equation*}
\size{\Ves{component-origin}} \times \size{\Ves{j}} = \order{\var{j}^2}.
\end{equation*}
Adding \var{other-tries}
and summing over the Earley sets,
we have
\begin{equation*}
\order{\var{n}^2} +
\! \sum\limits_{\Vloc{j}=0}^{n}{\order{\var{j}^2}} = \order{\var{n}^3}.
\qedhere
\end{equation*}
\end{proof}

\begin{theorem}\label{t:leo-right-recursion}
Either
a right derivation has a step
that uses a right recursive rule,
or it has length is at most \var{c},
where \var{c} is a constant which depends
on the grammar.
\end{theorem}

\begin{proof}
Let the constant \var{c} be the number
of symbols.
Assume, for a reductio, that a right derivation
expands to a 
Leo sequence of length
$\var{c}+1$, but that none of its steps uses a right recursive rule.

Because it is of length $\var{c}+1$,
the same symbol must appear twice as the rightmost symbol of
a derivation step.
(Since for the purposes of these
complexity results we ignore nulling symbols,
the rightmost symbol of a string will also be its rightmost
non-nulling symbol.)
So part of the rightmost derivation must take the form
\begin{equation*}
\Vstr{earlier-prefix} \cat \Vsym{A} \deplus \Vstr{later-prefix} \cat \Vsym{A}.
\end{equation*}
But the first step of this derivation sequence must use a rule of the
form
\begin{equation*}
\Vsym{A} \de \Vstr{rhs-prefix} \cat \Vsym{rightmost},
\end{equation*}
where $\Vsym{rightmost} \deplus \Vsym{A}$.
Such a rule is right recursive by definition.
This is contrary to the assumption for the reductio.
We therefore conclude that the length of a right derivation
must be less than or equal to \var{c},
unless at least one step of that derivation uses a right recursive rule.
\end{proof}

\subsection{Non-linear complexity results}

\begin{theorem}
For every unambiguous grammar,
\Marpa{} runs in $\order{n^2}$ time and space.
\end{theorem}

\begin{proof}
By assumption, \Cg{} is unambiguous, so that
by Theorem \ref{t:tries-O-eims},
and Theorem \ref{t:eim-count},
the number of attempts that \Marpa{} will make to add
EIM's is
\begin{equation*}
\var{c} \times \order{\var{n}^2},
\end{equation*}
where \var{c} is a constant that depends on \Cg{}.
Therefore,
by Theorems \ref{t:O1-time-per-eim}
and \ref{t:O1-links-per-eim},
the time and space complexity of \Marpa{}
for unambiguous grammars is \order{\var{n}^2}.
\end{proof}

\begin{theorem}
For every context-free grammar,
\Marpa{} runs in $\order{\var{n}^3}$ time.
\end{theorem}

\begin{proof}
By Theorem \ref{t:O1-time-per-eim},
and Theorem \ref{t:ambiguous-tries}.
\end{proof}

\begin{theorem}\label{t:cfg-space}
For every context-free grammar,
\Marpa{} runs in $\order{\var{n}^2}$ space,
if it does not track links.
\end{theorem}

\begin{proof}
By Theorem \ref{t:O1-space-per-eim}
and Theorem \ref{t:eim-count}.
\end{proof}

Traditionally only the space result stated for a parsing algorithm
is that 
without links, as in \ref{t:cfg-space}.
This is sufficiently relevant
if the parser is only used as a recognizer.
In practice, however, 
algorithms like \Marpa{}
are typically used in anticipation
of an evaluation phase,
for which links are necessary.

\begin{theorem}
For every context-free grammar,
\Marpa{} runs in $\order{\var{n}^3}$ space,
including the space for tracking links.
\end{theorem}

\begin{proof}
By Theorem \ref{t:O1-links-per-eim},
and Theorem \ref{t:ambiguous-tries}.
\end{proof}

\section{The Marpa Input Model}
\label{s:input}

In this \doc{},
up to this point,
the traditional input stream model
has been assumed.
As implemented,
Marpa generalizes the idea of
input streams beyond the traditional
model.

Marpa's generalized input model
replaces the input \Cw{}
with a set of tokens,
\var{tokens},
whose elements are triples of symbol,
start location and length:
\begin{equation*}
    [\Vsym{t}, \Vloc{start}, \var{length}]
\end{equation*}
such that
$\var{length} \ge 1$
and
$\Vloc{start} \ge 0$.
The size of the input, \size{\Cw},
is the maximum over
\var{tokens} of $\Vloc{start}+\var{length}$.

Multiple tokens can start at a single location.
(This is how \Marpa{} supports ambiguous tokens.)
The variable-length,
ambiguous and overlapping tokens
of \Marpa{}
bend the conceptual framework of ``parse location''
beyond its breaking point,
and a new term for parse location is needed.
Start and end of tokens are described in terms
of \dfn{earleme} locations,
or simply \dfn{earlemes}.
Token length is also measured in earlemes.

Like standard parse locations, earlemes start at 0,
and run up to \size{\Cw}.
Unlike standard parse locations,
there is not necessarily a token ``at'' any particular earleme.
(A token is considered to be ``at an earleme'' if it ends there,
so that there is never a token ``at'' earleme 0.)
In fact,
there may be earlemes at which no token either starts or ends,
although for the parse to succeed, such an earleme would have to be
properly inside at least one token.
Here ``properly inside'' means after the token's start earleme
and before the token's end earleme.

In the Marpa input stream, tokens
may interweave and overlap freely,
but gaps are not allowed.
That is, for all \Vloc{i} such
that $0 \le \Vloc{i} < \size{\Cw}$,
there must exist
\begin{equation*}
	 \var{token} = [\Vsym{t}, \Vloc{start}, \var{length}]
\end{equation*}
such that
\begin{gather*}
	 \var{token} \in \var{tokens} \quad \text{and} \\
	 \Vloc{start} \le \Vloc{i} < \Vloc{start}+\var{length}.
\end{gather*}

The intent of Marpa's generalized input model is to allow
users to define alternative input models for special
applications.
An example that arises in current practice is natural
language, features of which are most
naturally expressed with ambiguous tokens.
The traditional input stream can be seen as the special case of
the Marpa input model where
for all \Vsym{x}, \Vsym{y}, \Vloc{x}, \Vloc{y},
\var{xlength}, \var{ylength},
if we have both of
\begin{align*}
    [\Vsym{x}, \Vloc{x}, \var{xlength}] & \in \var{tokens} \quad \text{and} \\
    [\Vsym{y}, \Vloc{y}, \var{ylength}] & \in \var{tokens},
\end{align*}
then we have both of
\begin{gather*}
\var{xlength} = \var{ylength} = 1 \quad \text{and} \\
     \Vloc{x} = \Vloc{y} \implies \Vsym{x} = \Vsym{y}.
\end{gather*}

The correctness results hold for Marpa input streams,
but to preserve the time complexity bounds,
restrictions must be imposed.
In stating them,
let it be understood that
\begin{equation*}
	\token{[ \Vsym{x}, \Vloc{x}, \var{length} ]} \in \var{tokens}
\end{equation*}
We require that,
for some constant \var{c},
possibly dependent on the grammar \Cg{},
that every token length be less than \var{c},
\begin{equation}
\label{e:restriction1}
\forall \, \token{[\Vsym{x}, \Vloc{x}, \var{length}]},
\; \var{length} < \var{c},
\end{equation}
and that
the cardinality of the set of tokens starting at any
one location
be less than \var{c},
\begin{equation}
\label{e:restriction2}
 \forall \Vloc{i}, \;
 \Bigl|
 \bigl \lbrace
	\token{[ \Vsym{x}, \Vloc{x}, \var{length} ]} \bigm|
	\Vloc{x} = \Vloc{i}
  \bigr \rbrace
  \Bigr| < \var{c}
\end{equation}
Restrictions \ref{e:restriction1}
and \ref{e:restriction2}
impose little or no obstacle
to the practical use
of Marpa's generalized input model.
And with them,
the complexity results for \Marpa{} stand.

\bibliographystyle{plain}

\begin{thebibliography}{10}

\bibitem{AU1972}
Alfred H.~Aho and Jeffrey D.~Ullman.
\newblock The Theory of Parsing, Translation, and Computing
\newblock Prentice-Hall, Englewood Cliff, N.J., 1972.

\bibitem{AH2002}
John~Aycock and R.~Nigel~Horspool.
\newblock Practical Earley Parsing
\newblock {\em The Computer Journal},
    Vol. 45, No. 6, 2002, pp. 620-630.

\bibitem{Earley1970}
J.~Earley.
\newblock An efficient context-free parsing algorithm.
\newblock {\em Communications of the Association for Computing Machinery},
  13(2):94--102, 1970.

\bibitem{GJ2008}
Dirk~Grune and Ceriel~J.H Jacobs.
\newblock {\em Parsing Techniques: A Practical Guide}.
\newblock Springer, Amsterdam, 2008.

\bibitem{Irons}
Edgar~T.~Irons.
\newblock A syntax-directed compiler for ALGOL 60.
\newblock {\em Communications of the Association for Computing Machinery},
 4(1):51-55, Jan. 1961

\bibitem{Johnson}
Stephen~C. Johnson.
\newblock Yacc: Yet another compiler-compiler.
\newblock In {\em Unix Programmer's Manual Supplementary Documents 1}. 1986.

\bibitem{Marpa-HTML}
Jeffrey~Kegler, 2011: Marpa-HTML.
\newblock \url{http://search.cpan.org/dist/Marpa-HTML/}.

\bibitem{Marpa-R2}
Jeffrey~Kegler, 2013: Marpa-R2.
\newblock \url{http://search.cpan.org/dist/Marpa-R2/}.

\bibitem{Marpa-XS}
Jeffrey~Kegler, 2011: Marpa-XS-1.002000.
\newblock \url{http://search.cpan.org/dist/Marpa-XS/}.

\bibitem{Leo1991}
J.~M. I.~M. Leo.
\newblock A general context-free parsing algorithm running in linear time on
  every {LR($k$)} grammar without using lookahead.
\newblock {\em Theoretical Computer Science}, 82:165--176, 1991.

\bibitem{Wich2005}
Klaus Wich.
\newblock Ambiguity functions of context-free grammars and languages.
\newblock Diss. University of Stuttgart, 2005.
\end{thebibliography}

\clearpage
\tableofcontents

\end{document}
